package com.kbcard.ubf.cpbi.cmn;

import devon.core.exception.LBizException;
import devonenterprise.ext.core.exception.constants.MessageConstantsIF;

public class UBF_CONST {
	
	/**
	 * AUTH INFO
	 */
	public enum AuthInfo{
		/**
		 * API G/W DOMAIN
		 */
		API_GW_DOMAIN("http://10.75.235.90:15155"),		
		/**
		 * 오픈뱅킹이용기관코드
		 */
		UTZ_INS_CD("M202111721"),
		/**
		 * 오픈뱅킹이용기관코드
		 */
		CLIENT_ID("bb709b5c-db33-422f-aaa4-e5626817289b"),
		/**
		 * 오픈뱅킹이용기관코드
		 */
		CLIENT_SECRET("73071484-1624-4736-8a4e-30f27f39c086"), 
		/**
		 * Access Token 기본 권한 범위(고정값)
		 */
		TKEN_SCOPE_SA("sa"),
		/**
		 * Grant Type(고정값)
		 */
		DEFAULT_GRANT_TYPE("client_credentials"),
		/**
		 * 채널세부업무구분코드 기본값(오픈뱅킹)
		 */
		CHN_DTLS_BWK_DTCD_TB("TB"),
		/**
		 * URL Content-Type Form
		 */
		URL_CONTENT_TYPE_FORM("application/x-www-form-urlencoded; charset=UTF-8"),
		/**
		 * URL Content-Type Json
		 */
		URL_CONTENT_TYPE_JSON("application/json;charset=utf-8"),
		/**
		 * 오픈뱅킹금융기관코드
		 */
		FIOR_CD("381");//381.KB카드
	
		private String code;

		public String getCode() {
			return this.code;
		}
		
		AuthInfo(String code) {
			this.code = code;
		}
	}

	/**
	 * 금융기관그룹구분코드
	 */
	public enum FiorGrpDtCode {
		/** 은행 */
		BK("01", "은행"),
		/** 금융투자회사 */
		FIC("02", "금융투자회사"), // FNC_IVST_CO
		/** 상호금융기관 */
		MFI("03", "상호금융기관"), // MTLT_FNC_INS
		/** KB국민은행 */
		KBBK("04", "KB국민은행"),
		/** KB증권 */
		KBSEC("05", "KB증권"),
		/** 카드사 */
		CRD_CO("06", "카드사");

		private String code;
		private String name;

		FiorGrpDtCode(String code, String name) {
			this.code = code;
			this.name = name;
		}

		public String getCode() {
			return this.code;
		}

		public String getName() {
			return this.name;
		}
	}

	/**
	 * 은행 기관코드
	 */
	public enum BkCode {
		// KBCD_RPS(FiorGrpDtCode.CRD_CO.getCode(), "381"), // 주거래기관대표코드(KB카드:381)
		// KBCD_AGST(FiorGrpDtCode.CRD_CO.getCode(), "3810000"), //
		// 주거래기관점별코드(KB카드:3810000)

		/** KDB산업은행 */
		KDB_BK("002", "KDB산업은행"),
		/** IBK기업은행 */
		IBK_BK("003", "IBK기업은행"),
		/** KB은행 */
		KB_BK("004", "KB은행"),
		/** 수협은행 */
		SB_BK("007", "수협은행"),
		/** NH농협은행 */
		NH_BK("011", "NH농협은행"),
		/** 우리은행 */
		WR_BK("020", "우리은행"),
		/** SC제일은행 */
		SC_BK("023", "SC제일은행"),
		/** 한국씨티은행 */
		CT_BK("027", "한국씨티은행"),
		/** 대구은행 */
		DG_BK("031", "대구은행"),
		/** 부산은행 */
		BS_BK("032", "부산은행"),
		/** 광구은행 */
		KJ_BK("034", "광구은행"),
		/** 제주은행 */
		JJ_BK("035", "제주은행"),
		/** 전북은행 */
		JB_BK("037", "전북은행"),
		/** 경남은행 */
		KN_BK("039", "경남은행"),
		/** 하나은행 */
		HN_BK("081", "하나은행"),
		/** 신한은행 */
		SH_BK("088", "신한은행"),
		/** 케이뱅크 */
		K_BK("089", "케이뱅크"),
		/** 카카오뱅크 */
		KK_BK("090", "카카오뱅크"),
		/** 토스뱅크 */
		TS_BK("092", "토스뱅크"),
		/** 오픈은행 */
		OP_BK("097", "오픈은행");

		private String code;
		private String name;

		BkCode(String code, String name) {
			this.code = code;
			this.name = name;
		}

		public String getCode() {
			return this.code;
		}

		public String getName() {
			return this.name;
		}

		/** 명칭으로 기관코드 검색 */
		public static String getBkInsCode(String name) throws LBizException {
			for (BkCode bkInsCode : BkCode.values()) {
				if (bkInsCode.getName().equals(name)) {
					return bkInsCode.getCode();
				}
			}
			throw new LBizException("NO DATA");
		}
	}

	/**
	 * 금융투자회사 기관코드
	 */
	public enum FicCode {
		/** KB증권 */
		KBSEC_FIC("218", "KB증권"),
		/** KTB투자증권 */
		KTB_FIC("227", "KTB투자증권"),
		/** 미래에셋증권 */
		MA_FIC("238", "미래에셋증권"),
		/** 삼성증권 */
		SP_FIC("240", "삼성증권"),
		/** 한국투자증권 */
		KI_FIC("243", "한국투자증권"),
		/** NH투자증권 */
		NH_FIC("247", "NH투자증권"),
		/** 교보증권 */
		KB_FIC("261", "교보증권"),
		/** 하이투자증권 */
		HI_FIC("262", "하이투자증권"),
		/** 현대차증권 */
		HM_FIC("263", "현대차증권"),
		/** 키움증권 */
		KW_FIC("264", "키움증권"),
		/** 이베스트증권 */
		EB_FIC("265", "이베스트증권"),
		/** SK증권 */
		SK_FIC("266", "SK증권"),
		/** 대신증권 */
		DS_FIC("267", "대신증권"),
		/** 한화투자증권 */
		HW_FIC("269", "한화투자증권"),
		/** 하나금융투자 */
		HN_FIC("270", "하나금융투자"),
		/** 토스증권 */
		TS_FIC("271", "토스증권"),
		/** 신한금융투자 */
		SH_FIC("278", "신한금융투자"),
		/** DB금융투자 */
		DB_FIC("279", "DB금융투자"),
		/** 유진투자증권 */
		EG_FIC("280", "유진투자증권"),
		/** 메리츠증권 */
		MT_FIC("287", "메리츠증권"),
		/** 오픈증권 */
		OP_FIC("296", "오픈증권");

		private String code;
		private String name;

		FicCode(String code, String name) {
			this.code = code;
			this.name = name;
		}

		public String getCode() {
			return this.code;
		}

		public String getName() {
			return this.name;
		}

		/** 명칭으로 기관코드 검색 */
		public static String getFicCode(String name) throws LBizException {
			for (BkCode bkInsCode : BkCode.values()) {
				if (bkInsCode.getName().equals(name)) {
					return bkInsCode.getCode();
				}
			}
			throw new LBizException("NO DATA");
		}
	}

	/**
	 * 상호금융기관 기관코드
	 */
	public enum MfiCode {
		/** 수협중앙회 */
		SH_MFI("007", "수협중앙회"),
		/** 농협중앙회 */
		NH_MFI("007", "농협중앙회"),
		/** 새마을금고중앙회 */
		KF_MFI("007", "새마을금고중앙회"),
		/** 신협중앙회 */
		CU_MFI("007", "신협중앙회"),
		/** 저축은행중앙회 */
		FS_MFI("007", "저축은행중앙회"),
		/** 산림조합중앙회 */
		NF_MFI("007", "산림조합중앙회"),
		/** 우정사업본부(우체국) */
		KP_MFI("007", "우정사업본부(우체국)");

		private String code;
		private String name;

		MfiCode(String code, String name) {
			this.code = code;
			this.name = name;
		}

		public String getCode() {
			return this.code;
		}

		public String getName() {
			return this.name;
		}

		/** 명칭으로 기관코드 검색 */
		public static String getMfiCode(String name) throws LBizException {
			for (BkCode bkInsCode : BkCode.values()) {
				if (bkInsCode.getName().equals(name)) {
					return bkInsCode.getCode();
				}
			}
			throw new LBizException("NO DATA");
		}
	}
	
	/** 오픈뱅킹URL일련번호 */
	public enum ApiSeq{		
		/** 사용자인증(OAuth 2.0)_토큰발급 */
		API_0001(1),
		/** 사용자인증(OAuth 2.0)_토큰폐기 */
		API_0002(2),
		/** 사용자/계좌관리_사용자정보조회 */
		API_0003(3),
		/** 사용자/계좌관리_등록계좌조회 */
		API_0004(4),
		/** 사용자/계좌관리_계좌정보변경 */
		API_0005(5),
		/** 사용자/계좌관리_계좌정보조회 */
		API_0006(6),
		/** 사용자/계좌관리_계좌해지 */
		API_0007(7),
		/** 사용자/계좌관리_카드사용자등록 */
		API_0008(8),
		/** 사용자/계좌관리_카드정보변경 */
		API_0009(9),
		/** 사용자/계좌관리_카드정보조회 */
		API_0010(10),
		/** 사용자/계좌관리_카드조회해지 */
		API_0011(11),
		/** 사용자/계좌관리_선불계정 사용자등록 */
		API_0012(12),
		/** 사용자/계좌관리_선불계정사용자 정보변경 */
		API_0013(13),
		/** 사용자/계좌관리_선불계정사용자정보조회 */
		API_0014(14),
		/** 사용자/계좌관리_선불계정조회해지 */
		API_0015(15),
		/** 사용자/계좌관리_사용자탈퇴 */
		API_0016(16),
		/** 사용자/계좌관리_사용자계좌등록 */
		API_0017(17),
		/** 조회서비스(사용자)_잔액조회_핀테크이용번호 */
		API_0018(18),
		/** 조회서비스(사용자)_잔액조회_계좌번호 */
		API_0019(19),
		/** 조회서비스(사용자)_거래내역조회_핀테크이용번호 */
		API_0020(20),
		/** 조회서비스(사용자)_거래내역조회_계좌번호 */
		API_0021(21),
		/** 조회서비스(이용기관)_계좌실명조회 */
		API_0022(22),
		/** 조회서비스(이용기관)_송금인정보조회 */
		API_0023(23),
		/** 조회서비스(이용기관)_수취조회 */
		API_0024(24),
		/** 이체서비스_출금이체_핀테크이용번호 */
		API_0025(25),
		/** 이체서비스_출금이체_계좌번호 */
		API_0026(26),
		/** 이체서비스_입금이체_핀테크이용번호 */
		API_0027(27),
		/** 이체서비스_입금이체_계좌번호 */
		API_0028(28),
		/** 이체서비스_입금이체(계좌소유인증)_핀테크이용번호 */
		API_0029(29),
		/** 이체서비스_입금이체(계좌소유인증)_계좌번호 */
		API_0030(30),
		/** 이체서비스_이체결과조회 */
		API_0031(31),
		/** 이체서비스_자금반환청구 */
		API_0032(32),
		/** 이체서비스_자금반환결과조회 */
		API_0033(33),
		/** 카드정보조회_카드목록조회 */
		API_0034(34),
		/** 카드정보조회_카드기본정보조회 */
		API_0035(35),
		/** 카드정보조회_카드청구기본정보조회 */
		API_0036(36),
		/** 카드정보조회_카드청구상세정보조회 */
		API_0037(37),
		/** 선불계정정보조회_선불계정정보조회 */
		API_0038(38),
		/** 선불계정정보조회_선불계정잔액조회 */
		API_0039(39),
		/** 선불계정정보조회_선불계정거래내역조회 */
		API_0040(40),
		/** 어카운트인포_사용자정보확인 */
		API_0041(41),
		/** 어카운트인포_계좌통합조회 */
		API_0042(42),
		/** 관리API_참가기관상태조회 */
		API_0043(43),
		/** 관리API_수수료조회 */
		API_0044(44),
		/** 관리API_집계조회 */
		API_0045(45),
		/** 관리API_출금이체한도조회 */
		API_0046(46),
		/** 관리API_이상금융거래탐지내역조회 */
		API_0047(47);
		
		private int seq;

		ApiSeq(int seq) {
			this.seq = seq;
		}

		public int getSeq() {
			return this.seq;
		}
	}

	/** 오픈뱅킹 공통 에러코드 */
	public enum ObsErrCode implements MessageConstantsIF {
		/** Access토큰 오류 */
		ERR_9999("9999", "Access토큰 오류"),
		/** API 호출이력 처리오류 */
		ERR_9998("9998", "API 호출이력 처리오류"),
		/** API 정보조회 오류 */
		ERR_9997("9997", "API 정보조회 오류"),
		/** 토큰발급 API(EAI) 호출 오류 */
		ERR_9996("9996", "토큰발급 API(EAI) 호출 오류"),
		/** 토큰발급 API(G/W) 호출 오류 */
		ERR_9995("9995", "토큰발급 API(G/W) 호출 오류"),
		/** 토큰발급 API 호출결과 오류 */
		ERR_9994("9994", "토큰발급 API 호출결과 오류"),
		/** 토큰정보 등록 오류 */
		ERR_9993("9993", "토큰정보 등록 오류"),
		/** REQUEST TIMEOUT 오류 */
		ERR_9408("9408", "REQUEST TIMEOUT 오류"),
		/** EXECUTION 오류 오류 */
		ERR_9407("9407", "EXECUTION 오류"),

		/** 필수입력값 오류 */
		ERR_9000("9000", "필수입력값이 존재하지 않습니다."),
		
		/** 입력값 오류 */
		ERR_9001("9001", "입력값 오류"),
		
		/** 일자체크값 오류 */
		ERR_9002("9002", "시작일시가 종료일시보다 클수 없습니다."),

		/** 거래고유번호생성 오류 */
		ERR_9003("9003", "거래고유번호생성 오류"),
				
		/** 계좌 미존재시  */
		ERR_7000("7000", "계좌가 존재하지 않습니다."),
		
		/** 카드사 정보 미존재시  */
		ERR_7001("7001", "카드사 정보가 존재하지 않습니다."),
		
		/** 입력값 오류시  */
		ERR_7011("7011", "입력값을 확인바랍니다."),
		
		/** 수정 할 수 없습니다. */
		ERR_7700("7700", "수정 할 수 없습니다."),
		
		/** DB 처리중 오류가  오류가 발생햇습니다. */
		ERR_7777("7777", "처리 중 오류가 발생햇습니다."),
		
		/** 계좌실명조회 오류 */
		ERR_5000("5000", "계좌실명조회 오류"),
		
		/** 거래내역조회 오류 */
		ERR_4000("4000", "거래내역조회 오류"),
		
		/** 채널별카드목록조회 오류 */
		ERR_3000("3000", "채널별카드목록조회 오류"),
		ERR_3001("3001", "카드고객목록조회 오류[DB 조회 중 오류가 발생했습니다.]"),
		ERR_3002("3002", "채널별카드목록조회 오류[DB 조회 중 오류가 발생했습니다.]"),
		
		/** 채널별계좌정보목록조회 오류 */
		ERR_2000("2000", "채널별계좌정보목록조회 오류"),
		ERR_2002("2002", "채널별계좌정보목록조회 오류[DB 조회 중 오류가 발생했습니다.]"),
		
		/** 계좌정보조회 오류 */
		ERR_2001("2001", "계좌정보조회 오류"),
		
		/** 참가기관상태조회 오류  */
		ERR_B000("B000", "참가기관상태조회 오류"),
		/** 수수료조회 오류  */
		ERR_B001("B001", "수수료조회 오류"),
		/** 집계조회 오류  */
		ERR_B002("B002", "집계조회 오류"),
		/** 이상금융거래탐지내역조회 오류  */
		ERR_B003("B003", "이상금융거래탐지내역조회 오류"),

		/** 토큰 폐기 처리 오류  */
		ERR_A001("A001", "토큰 폐기 처리 오류[토큰 폐기 수정 건수가 없습니다.]"),
		ERR_A002("A002", "토큰 폐기 처리 오류[토큰 폐기 수정시 오류가 발생했습니다.]"),
		
		/** 토큰 조회 오류  */
		ERR_A003("A003", "토큰 조회 오류[잘못된 오픈뱅킹접근토큰내용입니다.]"),
		ERR_A004("A004", "토큰 조회 오류[토큰 조회시 오류가 발생했습니다.]"),

		/** 오픈뱅킹금결원API정보조회 오류  */
		ERR_F001("F001", "오픈뱅킹금결원API정보조회 오류[잘못된 오픈뱅킹URL일련번호입니다.]"),
		ERR_F002("F002", "오픈뱅킹금결원API정보조회 오류[오픈뱅킹금결원API정보조회시 오류가 발생했습니다.]"),

		/** 등록여부조회 오류 */
		ERR_1001("1001", "등록여부조회 오류"),
		
		/** 사용자탈퇴처리 오류 */
		ERR_1002("1002", "사용자탈퇴 처리 오류 [CI 내용이 존재하지 않습니다.]"),
		ERR_1003("1003", "사용자탈퇴 처리 오류 [DB업데이트 중 오류가 발생했습니다.]"),
		ERR_1004("1004", "사용자탈퇴 처리 오류[탈퇴할 사용자가 존재하지 않습니다.]"),
		
		/** 사용자고유번호조회 오류 */
		ERR_1000("1000", "사용자고유번호조회 오류[오픈뱅킹 사용자가 존재하지 않습니다.]"),
		ERR_1005("1005", "사용자고유번호조회 오류"),
		ERR_1006("1006", "사용자고유번호조회 오류[DB 조회 중 오류가 발생했습니다.]"),
		
		/** 등록채널목록조회 오류 */
		ERR_1007("1007", "등록채널목록조회 오류"),
		ERR_1008("1008", "등록채널목록조회 오류[DB 조회 중 오류가 발생했습니다.]"),
		
		/** 이용동의조회 오류 */
		ERR_H001("H001", "이용동의조회 오류[이용동의정보가 없습니다.]"),
		ERR_H002("H002", "사용자계좌 이용동의 갱신 오류[DB업데이트 중 오류가 발생했습니다.]");
		
		private String code;
		private String name;

		ObsErrCode(String code, String name) {
			this.code = code;
			this.name = name;
		}

		public String getCode() {
			return this.code;
		}

		public String getName() {
			return this.name;
		}
	}
	
	/** 금결원API 공통 에러코드 */
	public enum ApiErrCode implements MessageConstantsIF {
		/** 처리 성공 */
		ERR_A0000("A0000", "처리 성공"),
		/** 처리 중(이체결과조회 요망, 이체 시) */
		ERR_A0001("A0001", "처리 중(이체결과조회 요망, 이체 시)"),
		/** 참가기관 에러  */
		ERR_A0002("A0002", "참가기관 에러 "),
		/** 내부 처리 에러 */
		ERR_A0003("A0003", "내부 처리 에러"),
		/** 요청전문 포맷 에러 */
		ERR_A0004("A0004", "요청전문 포맷 에러"),
		/** 등록 데이터 에러 */
		ERR_A0005("A0005", "등록 데이터 에러"),
		/** 전문 변환 에러 */
		ERR_A0006("A0006", "전문 변환 에러"),
		/** 처리시간 초과 에러 */
		ERR_A0007("A0007", "처리시간 초과 에러"),
		/** 중복거래 에러 */
		ERR_A0008("A0008", "중복거래 에러"),
		/** API 세부업무 처리실패(리스트 건별 처리결과 확인) */
		ERR_A0009("A0009", "API 세부업무 처리실패(리스트 건별 처리결과 확인)"),
		/** 이용기관 APP 정보 확인 실패 */
		ERR_A0010("A0010", "이용기관 APP 정보 확인 실패"),
		/** 이용기관 API 사용권한 없음 */
		ERR_A0011("A0011", "이용기관 API 사용권한 없음"),
		/** API 정보 확인 실패 */
		ERR_A0012("A0012", "API 정보 확인 실패"),
		/** 이용기관 서비스 사용 불가 */
		ERR_A0013("A0013", "이용기관 서비스 사용 불가"),
		/** 탈퇴 회원 */
		ERR_A0014("A0014", "탈퇴 회원"),
		/** 시뮬레이터 응답전문 존재하지 않음 */
		ERR_A0015("A0015", "시뮬레이터 응답전문 존재하지 않음"),
		/** 내부 전문 송신 실패 */
		ERR_A0016("A0016", "내부 전문 송신 실패"),
		/** 참가기관 응답전문 TIMEOUT */
		ERR_A0017("A0017", "참가기관 응답전문 TIMEOUT"),
		/** 거래내역 없음 */
		ERR_A0018("A0018", "거래내역 없음"),
		/** 사용자탈퇴 처리중인 서비스 */
		ERR_A0019("A0019", "사용자탈퇴 처리중인 서비스"),
		/** 조회 가능시간 아님 */
		ERR_A0020("A0020", "조회 가능시간 아님"),
		/** 오픈뱅킹센터 지정 에러메시지 ※ "응답메시지(API)" 항목에 자세한 내용이 설정되며, 이용기관은 반드시 해당 내용을 사용자에게 표시해야함)  */
		ERR_A0021("A0021", "오픈뱅킹센터 지정 에러메시지 ※ '응답메시지(API)' 항목에 자세한 내용이 설정되며, 이용기관은 반드시 해당 내용을 사용자에게 표시해야함) "),
		/** 이용기관 입금이체 한도 초과(일 한도) */
		ERR_A0101("A0101", "이용기관 입금이체 한도 초과(일 한도)"),
		/** 이용기관 입금이체 한도 초과(월 한도) */
		ERR_A0102("A0102", "이용기관 입금이체 한도 초과(월 한도)"),
		/** 이용기관 출금이체 한도 초과(일 한도) */
		ERR_A0103("A0103", "이용기관 출금이체 한도 초과(일 한도)"),
		/** 이용기관 출금이체 한도 초과(월 한도) */
		ERR_A0104("A0104", "이용기관 출금이체 한도 초과(월 한도)"),
		/** 이용기관 출금이체 한도 초과(건당 한도) */
		ERR_A0105("A0105", "이용기관 출금이체 한도 초과(건당 한도)"),
		/** 이용기관 입금이체 한도 초과(건당 한도) */
		ERR_A0106("A0106", "이용기관 입금이체 한도 초과(건당 한도)"),
		/** 사용자 출금이체 한도 초과(건당 한도) */
		ERR_A0111("A0111", "사용자 출금이체 한도 초과(건당 한도)"),
		/** 사용자 출금이체 한도 초과(일 한도) */
		ERR_A0112("A0112", "사용자 출금이체 한도 초과(일 한도)"),
		/** 접근 권한 없음 */
		ERR_A0301("A0301", "접근 권한 없음"),
		/** 참가기관 API 이용권한 없음 */
		ERR_A0302("A0302", "참가기관 API 이용권한 없음"),
		/** 등록된 이용기관 수수료 정책 없음 */
		ERR_A0303("A0303", "등록된 이용기관 수수료 정책 없음"),
		/** 핀테크이용번호 정보 불일치 */
		ERR_A0304("A0304", "핀테크이용번호 정보 불일치"),
		/** 제 3 자정보제공동의 미완료 */
		ERR_A0305("A0305", "제 3 자정보제공동의 미완료"),
		/** 출금동의 미완료 ※ 이용기관에서 출금동의여부가 ‘Y’인 경우, 해당 응답코드를 수신 후 출금동의 해지 처리 가능 */
		ERR_A0306("A0306", "출금동의 미완료 ※ 이용기관에서 출금동의여부가 ‘Y’인 경우, 해당 응답코드를 수신 후 출금동의 해지 처리 가능"),
		/** 이체암호문구 불일치 */
		ERR_A0307("A0307", "이체암호문구 불일치"),
		/** 처리대행비용 할인대상 여부 없음 */
		ERR_A0308("A0308", "처리대행비용 할인대상 여부 없음"),
		/** 등록된 이용기관 수수료 정보 없음 */
		ERR_A0309("A0309", "등록된 이용기관 수수료 정보 없음"),
		/** 이체 내역 없음 */
		ERR_A0310("A0310", "이체 내역 없음"),
		/** 등록된 처리대행 수수료 정보 없음 */
		ERR_A0311("A0311", "등록된 처리대행 수수료 정보 없음"),
		/** 예금주명 불일치 */
		ERR_A0312("A0312", "예금주명 불일치"),
		/** 사용자 불일치 */
		ERR_A0313("A0313", "사용자 불일치"),
		/** 계좌이동 중 */
		ERR_A0314("A0314", "계좌이동 중"),
		/** 농협중앙회(단위농축협) 계좌번호를 입력했을 경우 오류 처리 */
		ERR_A0315("A0315", "농협중앙회(단위농축협) 계좌번호를 입력했을 경우 오류 처리"),
		/** 금융(거래)정보 제 3 자제공동의 만료 */
		ERR_A0316("A0316", "금융(거래)정보 제 3 자제공동의 만료"),
		/** 미등록 수취계좌 */
		ERR_A0317("A0317", "미등록 수취계좌"),
		/** 수취계좌 사업자등록번호 상이 */
		ERR_A0318("A0318", "수취계좌 사업자등록번호 상이"),
		/** 출금동의 만료 */
		ERR_A0319("A0319", "출금동의 만료"),
		/** 실명번호(전체) 조회 권한 없음 */
		ERR_A0320("A0320", "실명번호(전체) 조회 권한 없음"),
		/** 예금주 실명번호 구분코드와 실명번호의 형식(자리수) 불일치 */
		ERR_A0321("A0321", "예금주 실명번호 구분코드와 실명번호의 형식(자리수) 불일치"),
		/** 미등록된 이용기관 약정 계좌/계정 */
		ERR_A0322("A0322", "미등록된 이용기관 약정 계좌/계정"),
		/** 이용기관에 등록된 사용자 계좌 아님 */
		ERR_A0323("A0323", "이용기관에 등록된 사용자 계좌 아님"),
		/** 기등록된 조회서비스용 사용자 서비스 */
		ERR_A0324("A0324", "기등록된 조회서비스용 사용자 서비스"),
		/** 기등록된 출금서비스용 사용자 서비스 */
		ERR_A0325("A0325", "기등록된 출금서비스용 사용자 서비스"),
		/** 거래고유번호(참가기관) 중복 ※ 본 응답코드는 이용기관에서 잘못하여 거래고유번호(참가기관)를 중복 생성한 경우에 발생하므로 이용기관은 반드시 원인을 파악하여 조치 필요 */
		ERR_A0326("A0326", "거래고유번호(참가기관) 중복 ※ 본 응답코드는 이용기관에서 잘못하여 거래고유번호(참가기관)를 중복 생성한 경우에 발생하므로 이용기관은 반드시 원인을 파악하여 조치 필요"),
		/** 출금한도 미협의 은행 (이용기관 문의) */
		ERR_A0327("A0327", "출금한도 미협의 은행 (이용기관 문의)"),
		/** 계좌통합관리시스템 처리 오류 */
		ERR_A0331("A0331", "계좌통합관리시스템 처리 오류");

		private String code;
		private String name;

		ApiErrCode(String code, String name) {
			this.code = code;
			this.name = name;
		}

		public String getCode() {
			return this.code;
		}

		public String getName() {
			return this.name;
		}
	}

	// 전문종별코드
	public enum TlgPtpeCd {
		OPG_INDIC("0800"), // 전문종별코드(개시지시)
		OPG_RTN("0810"), // 전문종별코드(개시완료/개시장애 보고)
		REQ("0200"), // 전문종별코드(요청)
		RTN("0210"), // 전문종별코드(보고)
		ERR("9200"), // 전문종별코드(포멧에러)
		ERR_RSP("9210"), // 전문종별코드(중계기관에서 전송되는 오류응답)
		CMM_REQ_INDIC("9800"), // 전문종별코드(통신망전문포맷오류)
		CMM_RTN_NOTF("9810"); // 전문종별코드(통신망전문포맷오류)

		private String code;

		TlgPtpeCd(String code) {
			this.code = code;
		}

		public String getCode() {
			return this.code;
		}
	}

	// 오픈뱅킹 응답코드
	public enum RepCode {
		SUCCESS("000"), // 응답코드(정상)
		PRC_DLAY("146"), // 응답코드(처리지연)
		NT_PTCP_INS("150"), // 미참가 기관
		INS_MSG("312"), // 응답코드(기관지정 에러메시지)
		USR_ACC_NOT_EXST("412"), // 응답코드(사용자 계좌 없음)
		USR_INFO_NOT_ABNORMAL("412"), // 응답코드(사용자 정보 이상)
		UTZ_INS_PRIN_INS_DFFE("480"), // 응답코드(이용기관 정보 주거래기관 등록 이상)
		INQ_TRM_OVER("501"), // 응답코드(조회 가능기간 경과)
		NOTFOUND("502"), // 응답코드(조회 대상 거래내역 없음)
		PRV_TMN_USR("551"), // 응답코드(기해지 사용자)
		ACC_NMNL_DIFF("552"), // 응답코드(계좌명의 구분 상위)
		BRDT_FIFF("553"), // 응답코드(생년월일 상위)
		ETC_USR_ACC_REG_ERR("554"), // 응답코드(기타 사용자 등록 불가 계좌)
		USR_NOT_EXST("555"), // 응답코드(해당 사용자 없음)
		USR_NOT_REG("556"), // 응답코드(사용자 미등록)
		TMN_CRT_CHK_CRD("651"), // 응답코드(해지신용/체크카드)
		TRM_OVER_CRT_CHK_CRD("652"), // 응답코드(유효기간 경과 신용/체크카드)
		CRD_IDF_DIFF("653"), // 응답코드(카드식별자 이상)
		BIL_SNO_DIFF("654"), // 응답코드(결제순번 이상)
		USR_REG_INF_DIFF("655"), // 응답코드(사용자 등록정보 이상)
		ETC_PRC_ERR("656"); // 응답코드(기타 처리불가)

		private String code;

		RepCode(String code) {
			this.code = code;
		}

		public String getCode() {
			return this.code;
		}
	}

	// 오픈뱅킹 응답코드 메시지
	public enum RepCodeMsg {
		SUCCESS("정상"), PRC_DLAY("처리지연(잠시후 거래 요망)"), PTCP_INS("미참가 기관"), INS_MSG("기관지정 에러메시지"),
		USR_ACC_NOT_EXST("사용자 계좌 없음"), USR_INFO_NOT_ABNORMAL("사용자 정보 이상"), INQ_TRM_OVER("조회 가능기간 경과"),
		NOTFOUND("조회 대상 거래내역 없음"), PRV_TMN_USR("기해지 사용자"), ACC_NMNL_DIFF("계좌명의 구분 상위"), BRDT_FIFF("생년월일 상위"),
		ETC_USR_ACC_REG_ERR("기타 사용자 등록 불가 계좌(해당 지점 연락요망)"), USR_NOT_EXST("해당 사용자 없음"), USR_NOT_REG("사용자 미등록"),
		TMN_CRT_CHK_CRD("해지신용/체크카드"), TRM_OVER_CRT_CHK_CRD("유효기간 경과 신용/체크카드"), CRD_IDF_DIFF("카드식별자 이상"),
		BIL_SNO_DIFF("결제순번 이상"), USR_REG_INF_DIFF("사용자 등록정보 이상(기해지, 동의정보 상위 등)"), ETC_PRC_ERR("기타 처리불가(해당 지점 연락요망)");

		private String code;

		RepCodeMsg(String code) {
			this.code = code;
		}

		public String getCode() {
			return this.code;
		}
	}
}
