<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE requisite PUBLIC "-//LG CNS, Inc.//DTD Requisite Configuration 1.0//EN" "./dtd/requisite_1.0.dtd">
<requisite version="1.0">
  <!--
  Server Side Validation Framework인 requisite에 대한 기본설정을 한다.
  설정에 대한 자세한 설명은 http://www.dev-on.com 사이트의 requisite 설정을 참고하라.
  -->
  <!-- requisite rule xml 파일이 위치할 폴더를 지정한다.  #home을 사용할 수 있으며 #home 사용시 requisite home으로 지정된 폴더로 치환된다.  -->
  <rule-directory>#home/validation</rule-directory>

  <!-- 전체적으로 반영될 global rule을 지정한다. 여러개를 지정할 경우 ,를 구분자로 사용한다. -->
  <global-rule>xss</global-rule>
  
  <!--  validation 에러 발생시 발행할 에러 메시지를 처리하는 message-plugin을 정의한다. 내부적으로 Devon의 LMessage를 사용한다. -->
  <!--<message-plugin class="devonframework.service.security.requisite.impl.LMessgePlugin">-->
  <message-plugin class="devonenterprise.service.requisite.RequisiteMessage">
    <option id="title" value="true"/>  
    <option id="message-spec" value="default"/>
  </message-plugin>

  <!--  validaton 에러 발생시 requisite이 사용할 Logger를 정의한다. 내부적으로 Devon의 LLog를 사용한다. -->
  <validation-logger-plugin class="devonframework.service.security.requisite.impl.LValidationLogger">  
      <!-- Devon의 logger를 지정한다. -->
      <option id="logger" value="security"/>  
  </validation-logger-plugin>  
  <!--  validaton 에러 발생시 requisite이 사용할 Logger를 정의한다. 내부적으로 Devon의 LLog를 사용한다. -->
  <err-logger-plugin class="devonframework.service.security.requisite.impl.LErrorLogger">  
      <!-- Devon의 logger를 지정한다. -->
      <option id="logger" value="err"/>  
  </err-logger-plugin>

  <!-- 사용할 validator들을 정의한다. 각 validator의 id는 unique 하여야 한다-->
  <validators>

    <validator id="password" class="devonframework.service.security.requisite.validator.impl.LPasswordValidator">  
        <option id="deny-strings" value=""/>  
        <option id="minlength" value="0"/>   
        <option id="maxlength" value="0"/>  
        <option id="repeated-character-length" value="0"/>  
        <option id="sequential-character-length" value="0"/>  
            
        <option id="keyboard-sequential-character-length" value="0"/>  
            
        <option id="include-lowercase" value="true"/>  
        <option id="include-uppercase" value="false"/>  
        <option id="include-number" value="true"/>  
        <option id="include-punctuation" value="false"/>  
        <option id="included-character-length" value="3"/>  
            
        <option id="one-way-encryption" value="SHA-256"/>  
    </validator> 
    
    <!-- Cross Site Script Injection 체크 : requisite.validator.impl.XssValidator -->
    <!-- 주로 html tag와 tag 사이에 출력될 값에 대해 설정한다. -->
    <validator id="xss" class="requisite.validator.impl.XssValidator">
      <!-- 입력값이 문제가 되는 경우 에러를 발행할 것인지를 결정한다. -->
      <option id="throw-error" value="true"/>
      <!-- 입력값을 자동적으로 문제점을 수정한 값으로 치환할 것인지를 결정한다. throw-error가 true인 경우 무시된다. -->
      <!-- auto-correct와 throw-error가 둘다 true이면 throw-error가 적용된다. -->
      <!-- auto-correct와 throw-error가 둘다 false이면 아무일도 하지 않는다. -->
      <option id="auto-correct" value="false"/>
      <!-- 허용할 태그를 결정한다. 나머지 태그는 자동적으로 금지된다. 여러개의 값일 경우 ,를 구분자로 사용하여 정의한다. -->
      <option id="allow-tags" value="font,p,br,hr,pre,span,div"/>
      <!-- 금지할 태그를 결정한다. 나머지 태그는 자동적으로 허용된다. 여러개의 값일 경우 ,를 구분자로 사용하여 정의한다. -->
      <!-- allow-tags와 deny-tags를 동시에 사용하면 allow-tags만 작동한다. -->
      <!-- allow-tags와 deny-tags가 둘다 비어 있으면 모든 tag를 방어한다. -->
      <option id="deny-tags" value="object,applet,param,embed,img,input,script,frame,iframe,xml,bgsound,a,area,link"/>
      <!-- auto-correct가 true일 경우 자동적으로 HTML 특수 문자로 치환할 문자를 정의한다. 여러개의 값일 경우 ,를 구분자로 사용하여 정의한다. -->
      <!-- throw-error가 true일 경우 치환 대상으로 지정된 문자가 있으면 에러를 발행한다. -->
      <!-- 이 옵션은  requisite이 tag로 인식한 영역 중 태그명을 제외한 속성영역에 대해 동작한다. <a href="#"> 이라면 href="#"에 대해 동작한다.-->
      <!-- 또한 이 옵션은 allow-tags나 deny-tags와는 상관이 없다. -->
      <option id="intag-replace-character" value="true">
        <![CDATA[!"#$%&'*+,-./:;<=>?[\]^_`{|}~]]>
      </option>
      <!-- auto-correct가 true일 경우 자동적으로 HTML 특수 문자로 치환할 문자를 정의한다. 여러개의 값일 경우 ,를 구분자로 사용하여 정의한다. -->
      <!-- throw-error가 true일 경우 치환 대상으로 지정된 문자가 있으면 에러를 발행한다. -->
      <!-- replace-character 옵션은 requisite이 tag로 인식하지 않은 영역에 대해 동작한다. -->
      <!-- 또한 이 옵션은 allow-tags나 deny-tags와는 상관이 없다. -->
      <!-- 모든 문자가 사용가능하지만 주로 사용 가능한 문자는 !"#$%&'()*+,-./:;<=>?[\]^_`{|}~ 이다. -->
      <option id="replace-character" value="true">
        <![CDATA[%,<,>,\,{,|,},~]]>
      </option>
    </validator>
    
    <!-- Cross Site Script Injection 체크 : requisite.validator.impl.XssValidator -->
    <!-- 주로 html tag 내부의 attribute 영역에 출력될 값에 대해 설정한다. -->
    <validator id="xss-intag" class="requisite.validator.impl.XssValidator">
      <option id="throw-error" value="true"/>
      <option id="auto-correct" value="true"/>
      <option id="allow-tags" value=""/>
      <option id="deny-tags" value=""/>
      <option id="intag-replace-character" value="">
        <![CDATA[!"#$%&'()*+,-./:;<=>?[\]^_`{|}~]]>
      </option>
      <option id="replace-character" value="">
        <![CDATA[(&]]>
      </option>
    </validator>    

    <!-- Cross Site Script Injection 체크 : requisite.validator.impl.XssValidator -->
    <!-- 주로 script tag 블럭에 script coding의 일부로 출력될 값에 대해 설정한다. -->
    <validator id="xss-inscript" class="requisite.validator.impl.XssValidator">
      <option id="throw-error" value="true"/>
      <option id="auto-correct" value="true"/>
      <option id="allow-tags" value=""/>
      <option id="deny-tags" value=""/>
      <option id="intag-replace-character" value="">
        <![CDATA[!"#$%&'()*+,-./:;<=>?[\]^_`{|}~]]>
      </option>
      <option id="replace-character" value="">
        <![CDATA[(&]]>
      </option>
    </validator> 

    <!-- SQL Injection 체크 : requisite.validator.impl.SqlInjectionValidator -->
    <!-- SQL이 PreparedStatement를 사용하여 ?로 binding하는 경우에는 사용하여서는 안된다. -->
    <validator id="sql" class="requisite.validator.impl.SqlInjectionValidator">
      <!-- 입력값이 문제가 되는 경우 에러를 발행할 것인지를 결정한다. -->
      <option id="throw-error" value="true"/>
      <!-- 입력값을 자동적으로 문제점을 수정한 값으로 치환할 것인지를 결정한다. throw-error가 true인 경우 무시된다. -->
      <!-- auto-correct와 throw-error가 둘다 true이면 throw-error가 적용된다. -->
      <!-- auto-correct와 throw-error가 둘다 false이면 아무일도 하지 않는다. -->
      <option id="auto-correct" value="false"/>
      <!-- auto-correct가 true일 경우 자동적으로 삭제할 문자를 정의한다. 여러개의 값일 경우 ,를 구분자로 사용하여 정의한다. -->
      <!-- throw-error가 true일 경우 지정된 문자가 있으면 에러를 발행한다. -->
      <option id="erase" value=""/>
      <!-- auto-correct가 true일 경우 자동적으로 치환할 문자를 정의한다. A=B 형태로 정의하되 여러개의 값일 경우 ,를 구분자로 사용하여 정의한다. -->
      <!-- throw-error가 true일 경우 치환 대상으로 지정된 문자가 있으면 에러를 발행한다. -->
      <option id="replace">
        <![CDATA['='',&quot;=&quot;&quot;,\=\\]]>
      </option>
    </validator>

    <!-- 필수입력 체크 : requisite.validator.impl.RequiredValidator -->
    <validator id="required" class="requisite.validator.impl.RequiredValidator">
      <!-- 공백문자만으로 이루어진 입력값일 경우 공백문자를 무시한다. -->
      <option id="ignore-white-space" value="true"/>
      <!-- 입력값에 대해 자동적으로 trim을 할 것인지의 여부를 결정한다. -->
      <option id="auto-trim" value="false"/>
    </validator>

    <!-- 정규식 체크 : requisite.validator.impl.RegExpValidator -->
    <!-- 체크할 정규식은 rule xml에서 regexp=^[a-z]$의 형태로 정의할 수 있으며 option 의 regexp로도 정의할 수 있다 둘다 정의되었을 경우 option tag의 정의가 우선한다. -->
    <!-- 또한 정규식은 입력된 전체 문자열에 match 되는 것이므로 반드시 ^로 시작하여 $로 끝나야 한다. -->
    <validator id="regexp" class="requisite.validator.impl.RegExpValidator">
      <option id="regexp" value=""/>
    </validator>

    <!-- 영문자 체크 : requisite.validator.impl.RegExpValidator -->
    <validator id="alphabetic" class="requisite.validator.impl.RegExpValidator">
      <option id="regexp" value="^[a-zA-Z]+$"/>
    </validator>

    <!-- 숫자 체크 : requisite.validator.impl.RegExpValidator -->
    <validator id="numeric" class="requisite.validator.impl.RegExpValidator">
      <option id="regexp" value="^[0-9]+$"/>
    </validator>

    <!-- 영문자/숫자 체크 : requisite.validator.impl.RegExpValidator -->
    <validator id="alpha_numeric" class="requisite.validator.impl.RegExpValidator">
      <option id="regexp" value="^[A-Za-z0-9]+$"/>
    </validator>

    <!-- 정수 체크 : requisite.validator.impl.RegExpValidator -->
    <validator id="integer" class="requisite.validator.impl.RegExpValidator">
      <option id="regexp" value="^(\+|\-|\d*)\d+$"/>
    </validator>

    <!-- 실수 체크 : requisite.validator.impl.RegExpValidator -->
    <validator id="float" class="requisite.validator.impl.RegExpValidator">
      <option id="regexp" value="^(\-|\+|\d*)\d+(\.|\d)\d*$"/>
    </validator>

    <!-- 이메일 주소 체크 : requisite.validator.impl.RegExpValidator -->
    <validator id="email" class="requisite.validator.impl.RegExpValidator">
      <option id="regexp" value="^\w+((-|\.)\w+)*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z]{2,4}$"/>
    </validator>

    <!-- 도메인 주소 체크 : requisite.validator.impl.RegExpValidator -->
    <validator id="domain" class="requisite.validator.impl.RegExpValidator">
      <option id="regexp" value="^[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z]{2,4}$"/>
    </validator>

    <!-- 최대길이 체크 : requisite.validator.impl.MaxlengthValidator -->
    <validator id="maxlength" class="requisite.validator.impl.MaxlengthValidator"/>

    <!-- 최소길이 체크 : requisite.validator.impl.MinlengthValidator -->
    <validator id="minlength" class="requisite.validator.impl.MinlengthValidator"/>

    <!-- 최대값 체크 : requisite.validator.impl.MaxvalueValidator -->
    <validator id="maxvalue" class="requisite.validator.impl.MaxvalueValidator"/>

    <!-- 최소값 체크 : requisite.validator.impl.MinvalueValidator -->
    <validator id="minvalue" class="requisite.validator.impl.MinvalueValidator"/>

    <!-- 최대Byte 체크 : requisite.validator.impl.MaxbyteValidator -->
    <validator id="maxbyte" class="requisite.validator.impl.MaxbyteValidator"/>

    <!-- 최소Byte 체크 : requisite.validator.impl.MinbyteValidator -->
    <validator id="minbyte" class="requisite.validator.impl.MinbyteValidator"/>

    <!-- 날짜 체크 : requisite.validator.impl.DateValidator -->
    <!-- 다국어 및 날짜 format은 지원하지 않는다. -->
    <validator id="date" class="requisite.validator.impl.DateValidator"/>

    <!-- 주민번호  체크: requisite.validator.impl.PsnValidator -->
    <validator id="psn" class="requisite.validator.impl.PsnValidator"/>

    <!-- 재외국인 등록번호 체크 : requisite.validator.impl.FsnValidator -->
    <validator id="fsn" class="requisite.validator.impl.FsnValidator"/>

    <!-- 사업자등록번호 체크 : requisite.validator.impl.CsnValidator -->
    <validator id="csn" class="requisite.validator.impl.CsnValidator"/>

    <!-- 법인번호 체크 : requisite.validator.impl.LsnValidator -->
    <validator id="lsn" class="requisite.validator.impl.LsnValidator"/>

    <!-- 신용카드 체크 : requisite.validator.impl.CreditcardValidator -->
    <!-- 19자리 이하의 크레디트 카드 번호를 luhn mod - 10 test를 이용하여 체크한다. -->
    <!-- VISA, MASTER, AmericalExpress, DinersClub, Discover, EnRoute -->
    <validator id="credit" class="requisite.validator.impl.CreditcardValidator"/>

    <!-- fileupload시 금지될 확장자를 정의한다. : requisite.validator.impl.FileuploadValidator -->
    <validator id="fileupload" class="requisite.validator.impl.FileuploadValidator">
      <!-- 허용할 확장자를 지정한다. 나머지 확장자는 자동적으로 금지된다. 여러개의 값일 경우 ,를 구분자로 사용하여 정의한다. -->
      <option id="allow-exts" value="gif,jpg,txt"/>
      <!-- 금지할 확장자를 지정한다. 나머지 확장자는 자동적으로 허용된다. 여러개의 값일 경우 ,를 구분자로 사용하여 정의한다. -->
      <!-- allow-exts와 deny-exts를 동시에 사용하면 allow-exts만 작동한다. -->
      <option id="deny-exts" value="jsp,cgi,php,class"/>
    </validator>

    <!-- filedownload시 입력값으로 filename이나 path가 사용될때 ..\나 ../가 있는지 체크한다. : requisite.validator.impl.FiledownloadValidator -->
    <validator id="filedownload" class="requisite.validator.impl.FiledownloadValidator"/>

    <!-- 입력값이 정의된 값중의 하나에 해당되는지 체크 : requisite.validator.impl.ContainsValidator -->
    <!-- 체크할 문자열은 rule xml에서 contains=a|b|c의 형태로 정의할 수 있으며 option 의 contains로도 정의할 수 있다 둘다 정의되었을 경우 option tag의 정의가 우선한다. -->
    <validator id="contains" class="requisite.validator.impl.ContainsValidator">
      <option id="contains" value=""/>
      <!-- 대소문자를 무시하고 비교할 것인지를 설정한다. -->
      <option id="ignore-case" value="false"/>
    </validator>

    <!-- 핸드폰 국번 체크 : requisite.validator.impl.ContainsValidator -->
    <validator id="hpd" class="requisite.validator.impl.ContainsValidator">
      <option id="contains" value="019|010|011|016|017|018|0130"/>
      <option id="ignore-case" value="false"/>
    </validator>

    <!-- 장거리 전화 국번 체크 : requisite.validator.impl.ContainsValidator -->
    <validator id="ddd" class="requisite.validator.impl.ContainsValidator">
      <option id="contains" value="02|031|032|033|041|042|043|051|052|053|054|055|061|062|063|064|070|080|0502|0505"/>
      <option id="ignore-case" value="false"/>
    </validator>

    <!-- Wildcard 체크 : requisite.validator.impl.WildcardValidator -->
    <!-- 체크할 Wildcard은 rule xml에서 wildcard=A*등의 형태로 정의할 수 있으며 option 의 wildcard로도 정의할 수 있다 둘다 정의되었을 경우 option tag의 정의가 우선한다. -->
    <validator id="wildcard" class="requisite.validator.impl.WildcardValidator">
      <option id="wildcard" value=""/>
      <!-- 대소문자를 무시하고 비교할 것인지를 설정한다. -->
      <option id="ignore-case" value="false"/>
    </validator>

    <!-- 입력값이 정의된 두 값 사이의 값인지 체크 : requisite.validator.impl.RangeValidator -->
    <!-- 체크할 값은 rule xml에서 range=from-to의 형태로 정의할 수 있으며 option 의 range로도 정의할 수 있다 둘다 정의되었을 경우 option tag의 정의가 우선한다. -->
    <!-- 기본적으로 각 값을 Double 객체로 변환하여 비교하며 Double 객체의 compareTo 메소드를 사용하여 체크한다. -->
    <validator id="range" class="requisite.validator.impl.RangeValidator">
      <option id="range" value=""/>
    </validator>

    <!-- 문자열 입력값이 정의된 두 값 사이의 값인지 체크 : requisite.validator.impl.RangeStringValidator -->
    <!-- 체크할 문자열은 rule xml에서 range=from-to의 형태로 정의할 수 있으며 option 의 range로도 정의할 수 있다 둘다 정의되었을 경우 option tag의 정의가 우선한다. -->
    <!-- 기본적으로 String 객체의 compareTo 메소드를 사용하여 체크한다. -->
    <validator id="range-string" class="requisite.validator.impl.RangeStringValidator">
      <option id="range" value=""/>
      <option id="ignore-case" value="false"/>
    </validator>

    <!-- 영문자의 대소문자를 체크한다. : requisite.validator.impl.CaseValidator -->
    <validator id="case" class="requisite.validator.impl.CaseValidator">
      <!-- 가능한 값 : upper, lower. case가 정의되지 않으면 lower가 default로 지정된다.  -->
      <!-- 대소문자 지정은 rule xml에서 case=upper의 형태로 정의할 수 있으며 option 의 case로도 정의할 수 있다 둘다 정의되었을 경우 option tag의 정의가 우선한다. -->
      <option id="case" value=""/>
      <!-- 입력값이 문제가 되는 경우 에러를 발행할 것인지를 결정한다. -->
      <option id="throw-error" value="false"/>
      <!-- 입력값을 자동적으로 문제점을 수정한 값으로 치환할 것인지를 결정한다. throw-error가 true인 경우 무시된다. -->
      <option id="auto-correct" value="true"/>
    </validator>

    <!-- 입력값의 좌우 문자열의 공백 문자를 검사한다. : requisite.validator.impl.TrimValidator -->
    <validator id="trim" class="requisite.validator.impl.TrimValidator">
      <!-- 가능한 값 : left, right, both. trim이 정의되지 않거나 잘못된 문자열이 들어가면 both가 default로 지정된다. -->
      <option id="trim" value="both"/>
      <!-- 입력값이 문제가 되는 경우 에러를 발행할 것인지를 결정한다. -->
      <option id="throw-error" value="false"/>
      <!-- 입력값을 자동적으로 문제점을 수정한 값으로 치환할 것인지를 결정한다. throw-error가 true인 경우 무시된다. -->
      <option id="auto-correct" value="true"/>
    </validator>

    <!-- 입력값의 strip으로 정의된 정규식과 매치되는 문자를 제거한다. : requisite.validator.impl.StripValidator -->
    <!-- 체크할 정규식은 rule xml에서 strip=[0-9]의 형태로 정의할 수 있으며 option 의 strip로도 정의할 수 있다 둘다 정의되었을 경우 option tag의 정의가 우선한다. -->
    <!-- 정규식은 전체 문자열 match가 아니라 한 글자에 대한 match이다. -->
    <validator id="strip" class="requisite.validator.impl.StripValidator">
      <option id="strip" value="">
        <![CDATA[]]> 
      </option>
    </validator>

    <!-- 입력값의 특수문자 및 공백문자를 자동으로 제거한다. : requisite.validator.impl.StripValidator -->
    <validator id="strip-spcial" class="requisite.validator.impl.StripValidator">
      <option id="strip" value="">
        <![CDATA[\p{Punct}|\s]]>
      </option>
    </validator>
    

  </validators>

</requisite>