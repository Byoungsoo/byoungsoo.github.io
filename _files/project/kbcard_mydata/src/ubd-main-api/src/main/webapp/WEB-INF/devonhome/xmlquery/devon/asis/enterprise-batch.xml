<?xml version="1.0" encoding="euc-kr"?>

<statements>

    <!-- 작업 정보 반환 (1건) -->
    <statement name="retrieveSingleJob">
		<![CDATA[
			SELECT
			      JOB_ID,
			      JOB_DESC,
			      EXECUTOR_ID,
			      EXEC_ENABLE,
			      COMMIT_COUNT,
			      EXECUTION_TYPE,
			      IS_SIMULTANEOUS,
			      SIMULTANEOUS_LIMIT_COUNT,
			      TIMEOUT,
			      JOB_CYCLE,
			      REG_DT,
			      MOD_USER_ID,
			      MOD_DT,
			      REG_USER_ID,
			      SITE_CD,
			      TUNING_API_ENABLE,
			      NVL(FETCH_SIZE,'0') AS FETCH_SIZE
			FROM
			      DEVON.SERE_BT_JOB_INFO_TB
			WHERE JOB_ID = ${JOB_ID}
			AND   SITE_CD = ${SITE_CD}
		]]>
    </statement>

    <!-- 작업 내 스텝 정보 목록 반환 -->
    <statement name="retrieveStepList">
    <![CDATA[
      SELECT
            JOB_ID,
            STEP_ID,
            STEP_DESC,
            WORKER_CLASS,
            THREAD_NUM,
            PARALLEL_MODE,
            MAIN_ITEM_TYPE,
            MOD_DT,
            MOD_USER_ID,
            REG_DT,
            REG_USER_ID,
            SITE_CD
       FROM DEVON.SERE_BT_STEP_INFO_TB
      WHERE JOB_ID = ${JOB_ID}
      AND   SITE_CD = ${SITE_CD}
   ORDER BY JOB_ID, STEP_ID
    ]]>
    </statement>

    <!-- 작업 내 스텝 정보 목록 반환 -->
    <statement name="retrieveStepDependOnsList">
    <![CDATA[
      SELECT
             A.JOB_ID,
             A.STEP_ID,
             A.DEPEND_ONS_STEP_ID,
             (SELECT COUNT(*) CNT
              FROM   DEVON.SERE_BT_STEP_INFO_TB
              WHERE  JOB_ID = ${JOB_ID}
              AND    STEP_ID = A.DEPEND_ONS_STEP_ID 
              AND    STEP_ID != A.STEP_ID 
              AND    SITE_CD = ${SITE_CD}
              )  DEPEND_ONS_STEP_ID_EXIST_CNT,
             A.MOD_DT,
             A.MOD_USER_ID,
             A.REG_DT,
             A.REG_USER_ID,
             A.SITE_CD
      FROM   DEVON.SERE_BT_STEP_DEPEND_ONS_TB  A
      WHERE  A.JOB_ID = ${JOB_ID}
        AND  A.STEP_ID = ${STEP_ID}
        AND  A.SITE_CD = ${SITE_CD}
      ORDER  BY A.JOB_ID, A.STEP_ID
    ]]>
    </statement>

    <!-- 작업 최근 실행 결과 일부 반환 -->
    <statement name="execlog.retrieveLatestJobExecLog">
    <![CDATA[
     SELECT 
                    JOB_ID,
                    EXEC_COUNT,
                    EXECUTOR_ID,
                    FILELOG_PATH,
                    START_TIME,
                    END_TIME,
                    STATUS_CODE,
                    CAUSE_STATUS_CODE,
                    O_DATE,
                    PROC_SEQ,
                    EXEC_SEQ,
                    COMMIT_COUNT,
                    EXECUTION_TYPE,
                    IS_SIMULTANEOUS,
                    TIMEOUT,
                    JOB_CYCLE,
                    MOD_DT,
                    MOD_USER_ID,
                    REG_DT,
                    REG_USER_ID,
                    SITE_CD
    FROM
        ( SELECT
                    JOB_ID,
                    EXEC_COUNT,
                    EXECUTOR_ID,
                    FILELOG_PATH,
                    TO_CHAR(START_TIME, 'YYYY-MM-DD HH24:MI:SS.FF3') START_TIME,
                    TO_CHAR(END_TIME, 'YYYY-MM-DD HH24:MI:SS.FF3') END_TIME,
                    STATUS_CODE,
                    CAUSE_STATUS_CODE,
                    O_DATE,
                    PROC_SEQ,
                    EXEC_SEQ,
                    COMMIT_COUNT,
                    EXECUTION_TYPE,
                    IS_SIMULTANEOUS,
                    TIMEOUT,
                    JOB_CYCLE,
                    MOD_DT,
                    MOD_USER_ID,
                    REG_DT,
                    REG_USER_ID,
                    SITE_CD
           FROM
                    DEVON.SERE_BT_JOB_EXEC_TX_TB
          WHERE     EXECUTOR_ID = 'SHELL'
          AND       JOB_ID = ${JOB_ID}
		  AND       SITE_CD = ${SITE_CD}
          ORDER BY  START_TIME DESC )
    WHERE ROWNUM = 1
    ]]>
    </statement>

    <!-- 작업 실행 이력을 새로 추가함 -->
    <statement name="execlog.insertJobStopExecLog">
        INSERT INTO DEVON.SERE_BT_JOB_EXEC_TX_TB (
                    JOB_ID,
                    EXEC_COUNT,
                    EXECUTOR_ID,
                    START_TIME,
                    END_TIME,
                    STATUS_CODE,
                    CAUSE_STATUS_CODE,
                    O_DATE,
                    PROC_SEQ,
                    EXEC_SEQ,
                    EXECUTION_TYPE,
                    JOB_CYCLE,
                    MOD_DT,
                    MOD_USER_ID,
                    REG_DT,
                    REG_USER_ID,
                    SITE_CD,
                    EXEC_SERVER_DIV_CD,
                    PID,
                    JAS_NAME
        ) values (
                    ${JOB_ID},
                    ${EXEC_COUNT},
                    ${EXECUTOR_ID},
                    SYSTIMESTAMP,
                    SYSTIMESTAMP,
                    --CURRENT_TIMESTAMP,
                    ${STATUS_CODE},
                    ${CAUSE_STATUS_CODE},
                    ${O_DATE},
                    ${PROC_SEQ},
                    ${EXEC_SEQ},
                    ${EXECUTION_TYPE},
                    ${JOB_CYCLE},
                    TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
                    ${MOD_USER_ID},
                    TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
                    ${REG_USER_ID},
                    ${SITE_CD},
                    ${EXEC_SERVER_DIV_CD},
                    ${PID},
                    ${JAS_NAME}
        )
    </statement>

    <!-- 작업 실행 이력을 새로 추가함 -->
    <statement name="execlog.insertJobExecLog">
        INSERT INTO DEVON.SERE_BT_JOB_EXEC_TX_TB (
                    JOB_ID,
                    EXEC_COUNT,
                    EXECUTOR_ID,
                    START_TIME,
                    STATUS_CODE,
                    CAUSE_STATUS_CODE,
                    O_DATE,
                    PROC_SEQ,
                    EXEC_SEQ,
                    EXECUTION_TYPE,
                    JOB_CYCLE,
                    MOD_DT,
                    MOD_USER_ID,
                    REG_DT,
                    REG_USER_ID,
                    SITE_CD,
                    EXEC_SERVER_DIV_CD,
                    PID,
                    JAS_NAME

        ) values (
                    ${JOB_ID},
                    ${EXEC_COUNT},
                    ${EXECUTOR_ID},
                    SYSTIMESTAMP,
                    --CURRENT_TIMESTAMP,
                    ${STATUS_CODE},
                    ${CAUSE_STATUS_CODE},
                    ${O_DATE},
                    ${PROC_SEQ},
                    ${EXEC_SEQ},
                    ${EXECUTION_TYPE},
                    ${JOB_CYCLE},
                    TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
                    ${MOD_USER_ID},
                    TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
                    ${REG_USER_ID},
                    ${SITE_CD},
                    ${EXEC_SERVER_DIV_CD},
                    ${PID},
                    ${JAS_NAME}
                    
        )
    </statement>

    <statement name="execlog.retrieveStatusCodeList">
        SELECT
                STATUS_CODE,
                CAUSE_STATUS_CODE,
                EXEC_COUNT,
                PID
        FROM    DEVON.SERE_BT_JOB_EXEC_TX_TB
        WHERE   EXECUTOR_ID = 'SHELL'
          AND   JOB_ID  = ${JOB_ID}
          AND   O_DATE  = ${O_DATE}
          AND   SITE_CD = ${SITE_CD}
    </statement>

    <statement name="execlog.updateJobEndTime">
        UPDATE DEVON.SERE_BT_JOB_EXEC_TX_TB
           SET
--             END_TIME = CURRENT_TIMESTAMP,
               END_TIME = SYSTIMESTAMP,
               MOD_DT = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MIssFF3'),
               MOD_USER_ID = ${MOD_USER_ID}
         WHERE EXECUTOR_ID = 'SHELL'
           AND JOB_ID = ${JOB_ID}
           AND EXEC_COUNT=${EXEC_COUNT}
           AND SITE_CD = ${SITE_CD}
    </statement>

    <!-- 작업의 상태 코드 업데이트 -->
    <statement name="execlog.updateJobStatus">
      <![CDATA[
      UPDATE DEVON.SERE_BT_JOB_EXEC_TX_TB
         SET
             STATUS_CODE = ${STATUS_CODE},
             CAUSE_STATUS_CODE = ${CAUSE_STATUS_CODE},
             MOD_DT = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MIssFF3'),
             MOD_USER_ID = ${MOD_USER_ID}
       WHERE EXECUTOR_ID = 'SHELL'
         AND JOB_ID = ${JOB_ID}
         AND EXEC_COUNT=${EXEC_COUNT}
         AND SITE_CD = ${SITE_CD}
      ]]>
    </statement>
    
    <statement name="execlog.retrieveJobStatus">
       <![CDATA[
      SELECT 
            SUM(TOTAL_COUNT)    AS TOTAL_COUNT
          , SUM(SUCCESS_COUNT)  AS SUCCESS_COUNT
          , SUM(ERROR_COUNT)    AS ERROR_COUNT
          , SUM(SKIP_COUNT)     AS SKIP_COUNT
          , MIN(NVL(TO_CHAR(B.START_TIME,'YYYYMMDDHH24MISS'), ' '))  AS START_TIME
          , MAX(NVL(TO_CHAR(B.END_TIME,'YYYYMMDDHH24MISS') ,' '))    AS END_TIME
          , MAX(CASE WHEN B.CAUSE_STATUS_CODE = '6' 
                OR B.CAUSE_STATUS_CODE = '9'  THEN 'A'
                     WHEN B.CAUSE_STATUS_CODE = '10' THEN 'E'
                     WHEN B.CAUSE_STATUS_CODE = '4'  THEN 'J'
                ELSE 'S'   
                END )  AS CAUSE_STATUS_CODE
          from devon.SERE_BT_STEP_EXEC_TX_TB A
               ,DEVON.SERE_BT_JOB_EXEC_TX_TB B
      where
          A.JOB_ID =  ${JOB_ID}
      and A.EXECUTOR_ID = 'SHELL'
      AND A.SITE_CD = ${SITE_CD}
      and A.EXEC_COUNT = ${EXEC_COUNT}
      AND B.EXECUTOR_ID=A.EXECUTOR_ID 
      AND B.JOB_ID = A.JOB_ID 
      AND B.EXEC_COUNT=A.EXEC_COUNT 
      AND B.SITE_CD = A.SITE_CD 
      GROUP BY B.CAUSE_STATUS_CODE
       ]]>
    </statement>
    
    <statement name="execlog.retrieveJobHisinfoList">
       <![CDATA[
       SELECT 
              A.JOB_ID AS JOBID /* NEXT KEY2 */
            , A.EXEC_COUNT AS JOBID별실행회차 /* NEXT KEY3 */
            , A.JAS_NAME  AS JAS작업ID
            , A.O_DATE  AS ODATE_V8
	        , CASE WHEN A.STATUS_CODE = '3' AND A.CAUSE_STATUS_CODE = '10' THEN 'S'   
              WHEN A.CAUSE_STATUS_CODE = '4'  THEN 'J'  
              WHEN A.STATUS_CODE = '5' AND A.CAUSE_STATUS_CODE = '10'  THEN 'E'  
              WHEN A.CAUSE_STATUS_CODE IN ('6', '9', '11') THEN 'A' END  배치작업상태구분코드   /* devon.batch.common.Code.JobStatus KB메타 - A:비정상 종료 (Abend), E:작업 종료, J:작업 처리중, S:작업 시작 */            
            , B.TOTAL_COUNT  AS 총건수_N9
            , B.SUCCESS_COUNT AS 성공건수_N9
            , B.ERROR_COUNT AS 오류건수_N9
            , B.SKIP_COUNT AS SKIP건수_N9
            , TO_CHAR ( A.START_TIME, 'YYYYMMDDHH24MISS' ) AS 배치작업시작일시
            , TO_CHAR( A.END_TIME, 'YYYYMMDDHH24MISS' ) AS 배치작업종료일시
            , ROUND((EXTRACT(DAY FROM END_TIME - START_TIME) * 24 *60*60)
             + (EXTRACT(HOUR FROM END_TIME - START_TIME) *60*60)
             + (EXTRACT(MINUTE FROM END_TIME - START_TIME) *60)
             + (EXTRACT(SECOND FROM END_TIME - START_TIME) ),0)  AS 배치작업소요시간
           FROM DEVON.SERE_BT_JOB_EXEC_TX_TB A
          INNER JOIN (SELECT EXECUTOR_ID
                      , JOB_ID
                      , EXEC_COUNT
                      , SITE_CD   
                      , SUM (TOTAL_COUNT) AS TOTAL_COUNT
                      , SUM (SUCCESS_COUNT) AS SUCCESS_COUNT
                      , SUM (ERROR_COUNT) AS ERROR_COUNT
                      , SUM (SKIP_COUNT) AS SKIP_COUNT
                 FROM DEVON.SERE_BT_STEP_EXEC_TX_TB
                GROUP BY SITE_CD, EXECUTOR_ID, JOB_ID, EXEC_COUNT
             ) B ON ( A.EXECUTOR_ID = B.EXECUTOR_ID
                  AND A.JOB_ID = B.JOB_ID
                  AND A.EXEC_COUNT = B.EXEC_COUNT
                  AND A.SITE_CD = B.SITE_CD )
        WHERE 1=1
          AND A.EXECUTOR_ID = 'SHELL'
          AND A.SITE_CD = ${SITE_CD}
          AND A.O_DATE = ${ODATE_V8}
          AND A.JAS_NAME IS NOT NULL 
          AND A.CAUSE_STATUS_CODE IN ( ${CAUSE_STATUS_CODE:string:in}  ) 
          AND A.STATUS_CODE IN ( ${STATUS_CODE:string:in}  )
       ]]>
    </statement>  
    
    <statement name="execlog.retrieveJobHisinfo">
       <![CDATA[
       SELECT 
              X.JOB_ID AS JOBID /* NEXT KEY2 */
            , X.EXEC_COUNT AS JOBID별실행회차 /* NEXT KEY3 */
            , X.JAS_NAME  AS JAS작업ID
            , X.O_DATE  AS ODATE_V8
            , X.CAUSE_STATUS_CODE  AS 배치작업상태구분코드 /* devon.batch.common.Code.JobStatus KB메타 - A:비정상 종료 (Abend), E:작업 종료, J:작업 처리중, S:작업 시작 */
            , X.TOTAL_COUNT  AS 총건수_N9
            , X.SUCCESS_COUNT AS 성공건수_N9
            , X.ERROR_COUNT AS 오류건수_N9
            , X.SKIP_COUNT AS SKIP건수_N9
            , TO_CHAR( X.START_TIME, 'YYYYMMDDHH24MISS' ) AS 배치작업시작일시 /* 14자리 초단위 */    
            , TO_CHAR( X.END_TIME, 'YYYYMMDDHH24MISS' ) AS 배치작업종료일시  /* 14자리 초단위 */
            , ROUND((EXTRACT(DAY FROM X.END_TIME - X.START_TIME) * 24 *60*60)
             + (EXTRACT(HOUR FROM X.END_TIME - X.START_TIME) *60*60)
             + (EXTRACT(MINUTE FROM X.END_TIME - X.START_TIME) *60)
             + (EXTRACT(SECOND FROM X.END_TIME - X.START_TIME) ),0)  AS 배치작업소요시간  /* 초단위 */
       FROM 
       (
       	SELECT A.EXECUTOR_ID /* NEXT KEY1 */
       	     , A.JOB_ID /* NEXT KEY2 */
       	     , A.EXEC_COUNT /* NEXT KEY3 */
       	     , A.SITE_CD /* NEXT KEY4 */
       	     , A.JAS_NAME
       	     , A.O_DATE
	         , CASE WHEN A.STATUS_CODE = '3' AND A.CAUSE_STATUS_CODE = '10' THEN 'S' 
               WHEN A.CAUSE_STATUS_CODE = '4'  THEN 'J'  
               WHEN A.STATUS_CODE = '5' AND A.CAUSE_STATUS_CODE = '10'  THEN 'E'  
               WHEN A.CAUSE_STATUS_CODE IN ('6', '9', '11') THEN 'A' END  CAUSE_STATUS_CODE
       	     , B.TOTAL_COUNT
       	     , B.SUCCESS_COUNT
       	     , B.ERROR_COUNT
       	     , B.SKIP_COUNT
       	     , A.START_TIME
       	     , A.END_TIME
       	  FROM DEVON.SERE_BT_JOB_EXEC_TX_TB A
       	   INNER JOIN (SELECT EXECUTOR_ID
       	               , JOB_ID
       	               , EXEC_COUNT
       	               , SITE_CD   
       	               , SUM (TOTAL_COUNT) AS TOTAL_COUNT
       	               , SUM (SUCCESS_COUNT) AS SUCCESS_COUNT
       	               , SUM (ERROR_COUNT) AS ERROR_COUNT
       	               , SUM (SKIP_COUNT) AS SKIP_COUNT
       	          FROM DEVON.SERE_BT_STEP_EXEC_TX_TB
       	         GROUP BY EXECUTOR_ID, JOB_ID, EXEC_COUNT,SITE_CD
       	      ) B ON ( A.EXECUTOR_ID = B.EXECUTOR_ID
       	           AND A.JOB_ID = B.JOB_ID
       	           AND A.EXEC_COUNT = B.EXEC_COUNT
       	           AND A.SITE_CD = B.SITE_CD )
       	 WHERE 1=1
       	   AND A.EXECUTOR_ID = 'SHELL'
       	   AND A.JAS_NAME =  ${JAS_NAME}
       	   AND A.SITE_CD = ${SITE_CD}
       	   AND A.O_DATE = ${ODATE_V8}
       	   AND A.CAUSE_STATUS_CODE  IN ( ${CAUSE_STATUS_CODE:string:in}  ) 
           AND A.STATUS_CODE IN ( ${STATUS_CODE:string:in}  )
       	 ORDER BY EXECUTOR_ID
       	        , JOB_ID
       	        , EXEC_COUNT DESC  /* 실행이 나중인 건 */
       ) X 
       WHERE ROWNUM = 1 
       ]]>
    </statement>       

    <statement name="parameter.retrieveParameterList">
		<![CDATA[
			 SELECT
			        JOB_ID,
			        PARAM_KEY,
			        PARAM_SEQ,
			        PARAM_VALUE,
			        PARAM_DESC,
			        SEQ,
			        MOD_DT,
			        MOD_USER_ID,
			        REG_DT,
			        REG_USER_ID,
			        SITE_CD,
			        SYSIN_YN
			        --TO_CHAR(REG_DTM, 'YYYY-MM-DD HH24:MI:SS.FF3') REG_DTM,
			        --TO_CHAR(MOD_DTM, 'YYYY-MM-DD HH24:MI:SS.FF3') MOD_DTM,
			 FROM   DEVON.SERE_BT_PARAM_INFO_TB
			WHERE   JOB_ID = ${JOB_ID}
			AND     SITE_CD = ${SITE_CD}
		]]>
    </statement>

    <!-- 스텝 실행 이력을 새로 추가함 -->
    <statement name="execlog.insertStepExecLog">
        INSERT INTO DEVON.SERE_BT_STEP_EXEC_TX_TB (
        JOB_ID,
        STEP_ID,
        EXEC_COUNT,
        EXECUTOR_ID,
        STATUS_CODE,
        CAUSE_STATUS_CODE,
        START_TIME,
        O_DATE,
        PROC_SEQ,
        EXEC_SEQ,
        MOD_DT,
        MOD_USER_ID,
        REG_DT,
        REG_USER_ID,
        SITE_CD
        ) values (
        ${JOB_ID},
        ${STEP_ID},
        ${EXEC_COUNT},
        ${EXECUTOR_ID},
        ${STATUS_CODE},
        ${CAUSE_STATUS_CODE},
        SYSTIMESTAMP,
        ${O_DATE},
        ${PROC_SEQ},
        ${EXEC_SEQ},
        TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
        ${MOD_USER_ID},
        TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
        ${REG_USER_ID},
        ${SITE_CD}
        )
    </statement>

    <!-- 스텝의 상태 코드 업데이트 -->
    <statement name="execlog.updateStepStatus">
      <![CDATA[
      UPDATE  DEVON.SERE_BT_STEP_EXEC_TX_TB
         SET
              STATUS_CODE = ${STATUS_CODE},
              CAUSE_STATUS_CODE = ${CAUSE_STATUS_CODE},
              CURRENT_COUNT = ${CURRENT_COUNT},
              SUCCESS_COUNT = ${SUCCESS_COUNT},
              ERROR_COUNT = ${ERROR_COUNT},
              TOTAL_COUNT = ${TOTAL_COUNT},
              SKIP_COUNT = ${SKIP_COUNT},
              USER_MSG = SUBSTRB(${USER_MSG},1, 500),
              UOM = ${UOM},
              FAILED_SECTIONS = SUBSTRB(${FAILED_SECTIONS},1,4000),
              MOD_DT = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
              MOD_USER_ID = ${MOD_USER_ID}
       WHERE EXECUTOR_ID = 'SHELL'
         AND JOB_ID = ${JOB_ID}
         AND EXEC_COUNT=${EXEC_COUNT}
         AND STEP_ID=${STEP_ID}
         AND SITE_CD = ${SITE_CD}
      ]]>
    </statement>

    <statement name="execlog.updateStepEndTime">
        UPDATE DEVON.SERE_BT_STEP_EXEC_TX_TB
           SET
               --END_TIME = CURRENT_TIMESTAMP
               END_TIME = SYSTIMESTAMP,
               MOD_DT = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
               MOD_USER_ID = ${MOD_USER_ID}
         WHERE EXECUTOR_ID = 'SHELL'
           AND JOB_ID = ${JOB_ID}
           AND STEP_ID=${STEP_ID}
           AND EXEC_COUNT=${EXEC_COUNT}
           AND SITE_CD = ${SITE_CD}
   </statement>

   <!-- 작업의 실행 횟수 최대값을 반환함 -->
    <statement name="execlog.getMaxExecCount">
        SELECT
        CASE
        WHEN ( MAX(EXEC_COUNT) ) IS NULL
        THEN 0
        ELSE MAX(EXEC_COUNT)
        END  EXEC_COUNT
        FROM  DEVON.SERE_BT_JOB_EXEC_TX_TB
        WHERE  EXECUTOR_ID = 'SHELL'
        AND    JOB_ID = ${JOB_ID}
    </statement>

    <statement name="execlog.getMaxProcSeq">
        SELECT
                CASE
                WHEN ( MAX(PROC_SEQ) ) IS NULL
                THEN 0
                ELSE MAX(PROC_SEQ)
                 END PROC_SEQ
        FROM    DEVON.SERE_BT_JOB_EXEC_TX_TB
        WHERE   EXECUTOR_ID = ${EXECUTOR_ID}
          AND   JOB_ID = ${JOB_ID}
          AND   O_DATE = ${O_DATE}
    </statement>

    <statement name="execlog.getMaxExecSeq">
        SELECT
                CASE
                WHEN ( MAX(EXEC_SEQ) ) IS NULL
                THEN 0
                ELSE MAX(EXEC_SEQ)
                 END EXEC_SEQ
        FROM    DEVON.SERE_BT_JOB_EXEC_TX_TB
        WHERE   EXECUTOR_ID = 'SHELL'
          AND   JOB_ID = ${JOB_ID}
          AND   O_DATE = ${O_DATE}
          AND   PROC_SEQ = ${PROC_SEQ}
    </statement>

     <statement name="residential.retrieveResidentialList">
        <![CDATA[
          SELECT
                RESIDENTIAL_ID,
                RESIDENTIAL_CLASS,
                JOB_ID,
                EXECUTOR_NAME,
                MONITORING_INTERVAL,
                IS_EXEC_ENABLE,
                END_TIME,
                TIME_OUT,
                REG_DT,
                MOD_DT,
                MOD_USER_ID,
                REG_USER_ID,
                SITE_CD
          FROM
                DEVON.SERE_BT_RESIDENTIAL_INFO_TB
          WHERE 1=1
           {#1}
          ORDER BY RESIDENTIAL_ID
        ]]>

        <append where="false" condition="${RESIDENTIAL_ID}.NOTEMPTY" id="#1">
        <![CDATA[
              AND   UPPER(RESIDENTIAL_ID) LIKE UPPER('%'||${RESIDENTIAL_ID}||'%')
        ]]>
        </append>

        <append where="false" condition="${JOB_ID}.NOTEMPTY" id="#1">
        <![CDATA[
              AND   UPPER(JOB_ID) LIKE UPPER('%'||${JOB_ID}||'%')
        ]]>
        </append>
    </statement>

    <statement name="residential.retrieveResidential">
        <![CDATA[
          SELECT
                RESIDENTIAL_ID,
                RESIDENTIAL_CLASS,
                JOB_ID,
                EXECUTOR_NAME,
                MONITORING_INTERVAL,
                IS_EXEC_ENABLE,
                END_TIME,
                TIME_OUT,
                REG_DT,
                MOD_DT,
                MOD_USER_ID,
                REG_USER_ID,
                SITE_CD
          FROM
                DEVON.SERE_BT_RESIDENTIAL_INFO_TB
          WHERE RESIDENTIAL_ID = ${RESIDENTIAL_ID}
        ]]>
    </statement>

    <statement name="execlog.getResidentialMaxProcSeq">
        SELECT
                CASE
                WHEN ( MAX(PROC_SEQ) ) IS NULL
                THEN 0
                ELSE MAX(PROC_SEQ)
                END PROC_SEQ
        FROM    DEVON.SERE_BT_RESIDENTIAL_EXEC_TX_TB
        WHERE   RESIDENTIAL_ID  = ${RESIDENTIAL_ID} AND
                O_DATE = ${O_DATE}
    </statement>

    <statement name="execlog.insertResidentialExecLog">
        INSERT INTO DEVON.SERE_BT_RESIDENTIAL_EXEC_TX_TB (
        RESIDENTIAL_ID,
        START_TIME,
        STATUS_CODE,
        O_DATE,
        PROC_SEQ,
        MOD_DT,
        MOD_USER_ID,
        REG_DT,
        REG_USER_ID,
        SITE_CD
        ) VALUES (
        ${RESIDENTIAL_ID},
        --CURRENT_TIMESTAMP,
        SYSTIMESTAMP,
        ${STATUS_CODE},
        ${O_DATE},
        ${PROC_SEQ},
        TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
        ${MOD_USER_ID},
        TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
        ${REG_USER_ID},
        ${SITE_CD}
        )
    </statement>

    <statement name="execlog.updateResidentialExecLog">

      UPDATE DEVON.SERE_BT_RESIDENTIAL_EXEC_TX_TB
         SET
             END_TIME = (CASE
                       WHEN ${STATUS_CODE} = 1
                       THEN NULL
                       ELSE SYSTIMESTAMP
                       END),
             STATUS_CODE    = ${STATUS_CODE},
             UPDATE_TIME    = SYSTIMESTAMP,
             MOD_DT = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
             MOD_USER_ID = ${MOD_USER_ID}
       WHERE RESIDENTIAL_ID = ${RESIDENTIAL_ID} AND
             PROC_SEQ = ${PROC_SEQ} AND
             O_DATE = ${O_DATE}
    </statement>

    <!-- 스텝 실행 이력 반환 (단건) -->
    <statement name="execlog.retrieveStepExecInfo">
    <![CDATA[
      SELECT
            JOB_EXEC.JOB_ID JOB_ID,
            STEP_EXEC.STEP_ID STEP_ID,
            STEP_EXEC.EXEC_COUNT EXEC_COUNT,
            JOB_EXEC.EXEC_URL EXEC_URL,
            STEP_EXEC.CURRENT_COUNT CURRENT_COUNT,
            STEP_EXEC.ERROR_COUNT ERROR_COUNT,
            STEP_EXEC.TOTAL_COUNT TOTAL_COUNT,
            STEP_EXEC.SUCCESS_COUNT SUCCESS_COUNT,
            STEP_EXEC.RESUME_MODE RESUME_MODE,
            TO_CHAR(STEP_EXEC.START_TIME, 'YYYY-MM-DD HH24:MI:SS.FF3') START_TIME,
            TO_CHAR(STEP_EXEC.END_TIME, 'YYYY-MM-DD HH24:MI:SS.FF3') END_TIME,
            STEP_EXEC.STATUS_CODE STATUS_CODE,
            STEP_EXEC.FILELOG_PATH FILELOG_PATH,
            -- STATUS_DESC,
            TO_CHAR(STEP_EXEC.REG_DTM, 'YYYY-MM-DD HH24:MI:SS.FF3') REG_DTM,
            STEP_EXEC.REG_ENO REG_ENO,
            TO_CHAR(STEP_EXEC.MOD_DTM, 'YYYY-MM-DD HH24:MI:SS.FF3') MOD_DTM,
            STEP_EXEC.MOD_ENO MOD_ENO,
            STEP_EXEC.FAILED_SECTIONS
      FROM
            DEVON.OLB_STEP_EXEC_TX STEP_EXEC,
            DEVON.OLB_JOB_EXEC_TX JOB_EXEC
      WHERE
            JOB_EXEC.EXEC_COUNT = STEP_EXEC.EXEC_COUNT AND
            JOB_EXEC.JOB_ID = STEP_EXEC.JOB_ID AND
            STEP_EXEC.JOB_ID = ${JOB_ID} AND
            STEP_EXEC.STEP_ID = ${STEP_ID}  AND
            STEP_EXEC.EXEC_COUNT = ${EXEC_COUNT}
      ORDER BY
            JOB_ID, STEP_ID, EXEC_COUNT
    ]]>
    </statement>

    <!-- 사용자 이력 목록 추가 (임시 쿼리)-->
    <statement name="execlog.insertJobExecUserLog">
    <![CDATA[
    INSERT INTO DEVON.SERE_BT_EXEC_USER_TX_TB (
            JOB_ID,
            STEP_ID,
            PROC_SEQ,
            EXEC_COUNT,
            TX_ID,
            TX_SEQ,
            TX_VAL,
            TX_COUNT,
            START_TIME,
            O_DATE,
            MOD_DT,
            MOD_USER_ID,
            REG_DT,
            REG_USER_ID,
            SITE_CD
    ) SELECT
            ${JOB_ID},
            ${STEP_ID},
            ${PROC_SEQ},
            ${EXEC_COUNT},
            ${TX_ID},
            ${TX_SEQ},
            ${TX_VAL},
            NVL(MAX(TX_COUNT), 0) + 1 AS TX_COUNT,
            SYSTIMESTAMP,
            ${O_DATE},
            TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
            ${MOD_USER_ID},
            TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
            ${REG_USER_ID},
            ${SITE_CD}
        FROM DEVON.SERE_BT_EXEC_USER_TX_TB
        WHERE JOB_ID = ${JOB_ID}
        AND   STEP_ID = ${STEP_ID}
        AND   TX_ID = ${TX_ID}
        AND   O_DATE = ${O_DATE}
        AND   SITE_CD = ${SITE_CD}
    ]]>
    </statement>

    <statement name="execlog.updateJobExecUserLog">
    <![CDATA[
    UPDATE DEVON.SERE_BT_EXEC_USER_TX_TB
       SET
             TX_VAL          = ${TX_VAL},
             MOD_DT = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
             MOD_USER_ID = ${MOD_USER_ID}
     WHERE
             JOB_ID = ${JOB_ID}
       AND   STEP_ID = ${STEP_ID}
       AND   TX_ID  = ${TX_ID}
       AND   TX_SEQ  = ${TX_SEQ}
       AND   EXEC_COUNT  = ${EXEC_COUNT}
       AND   SITE_CD = ${SITE_CD}
    ]]>
    </statement>

    <statement name="execlog.retrieveProcSeq">
		<![CDATA[
			SELECT  PROC_SEQ, CAUSE_STATUS_CODE
			FROM    DEVON.SERE_BT_JOB_EXEC_TX_TB
			WHERE   EXECUTOR_ID = ${EXECUTOR_ID}
			AND     JOB_ID = ${JOB_ID}
			AND     EXEC_COUNT = ${EXEC_COUNT}
		]]>
    </statement>

    <statement name="execlog.retrieveJobStopMonitorStatus">
        SELECT
               JOB_ID,
               EXEC_COUNT,
               EXECUTOR_ID,
               STATUS_CODE,
               O_DATE,
               PROC_SEQ,
               EXEC_SEQ
        FROM    DEVON.SERE_BT_JOB_EXEC_STOP_TX_TB
        WHERE   EXECUTOR_ID = ${EXECUTOR_ID}
        AND     JOB_ID = ${JOB_ID}
        AND     EXEC_COUNT = ${EXEC_COUNT}
        AND     SITE_CD = ${SITE_CD}
    </statement>

    <!-- 스케줄러에 등록여부 상태 업데이트(테이블 변경본 - 임시)-->
    <statement name="updateScheduledJobIsExecExable">
  <![CDATA[
     UPDATE DEVON.SERE_BT_SCHEDULED_INFO_TB
      SET
            IS_EXEC_ENABLE = ${IS_EXEC_ENABLE},
            MOD_DT = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
            MOD_USER_ID = ${MOD_USER_ID}
      WHERE
            JOB_ID = ${JOB_ID}
      AND   SITE_CD = ${SITE_CD}
   ]]>
    </statement>

    <!-- 스케줄러 예약된 모든 작업들 조회(테이블 변경본 - 임시)-->
    <statement name="retrieveScheduledJobList">
  <![CDATA[
    SELECT
        DEVON.SERE_BT_JOB_INFO_TB.JOB_ID,
        DEVON.SERE_BT_JOB_INFO_TB.EXECUTOR_ID,
        DEVON.SERE_BT_JOB_INFO_TB.JOB_DESC,
        DEVON.SERE_BT_SCHEDULED_INFO_TB.SCHED_TYPE,
        DEVON.SERE_BT_SCHEDULED_INFO_TB.SCHED_STR,
        DEVON.SERE_BT_SCHEDULED_INFO_TB.IS_EXEC_ENABLE
    FROM
        DEVON.SERE_BT_JOB_INFO_TB, DEVON.SERE_BT_SCHEDULED_INFO_TB
    WHERE
        DEVON.SERE_BT_JOB_INFO_TB.JOB_ID = DEVON.SERE_BT_SCHEDULED_INFO_TB.JOB_ID
    AND (DEVON.SERE_BT_SCHEDULED_INFO_TB.SCHED_TYPE = 1 OR
        DEVON.SERE_BT_SCHEDULED_INFO_TB.SCHED_TYPE = 2)
    {#1}
   ]]>
        <append where="false" condition="${SCHED_TYPE}.NOTEMPTY" id="#1">
    <![CDATA[
     AND DEVON.SERE_BT_SCHEDULED_INFO_TB.JOB_ID LIKE '%' || ${JOB_ID} || '%'
    ]]>
        </append>
        <append where="false" condition="${IS_EXEC_ENABLE}.NOTEMPTY" id="#1">
    <![CDATA[
     AND DEVON.SERE_BT_SCHEDULED_INFO_TB.IS_EXEC_ENABLE =  ${IS_EXEC_ENABLE}
    ]]>
        </append>
    </statement>


   <statement name="fileListInfo">
    <![CDATA[
      SELECT
                JOB_ID,
                STEP_ID,
                FILE_SEQ,
                INOUT_TYPE,
                FILE_NAME,
                FILE_PATH,
                BIZ_FILE_PATH,
                FILE_ENC,
                IO_SPEC_ID,
                FILE_TYPE,
                FILE_FORM,
                FILE_ALIAS,
                MAIN_CHECK,
                FILE_WORK_PATH,
                'N' RENAME_FLAG,
                COMMENTS,
                CRLF_CHA_CD,
                FILE_BASE_DIRECTORY,
                MOD_DT,
                MOD_USER_ID,
                REG_DT,
                REG_USER_ID,
                SITE_CD,
                IOIT_REC_ENCF1,
                PRESERVE_CYCLE,
                LINE_END_DELIMITER_YN,
                FILE_CTGR_ID,
                NVL(EMPTY_FILE_CREAT_YN, 'Y') EMPTY_FILE_CREAT_YN,
                NVL(NOP_CRYPTO_YN, 'N') NOP_CRYPTO_YN,
                NVL(EBCDIC_CONV_YN, 'N') EBCDIC_CONV_YN,
                NVL(SOSI_OPTION, '1') SOSI_OPTION,
                BACKUP_DIR_PATH,
                BACKUP_FILENAME
      FROM DEVON.SERE_BT_FILE_INFO_TB
      WHERE JOB_ID = ${JOB_ID}
        AND STEP_ID = ${STEP_ID}
        AND SITE_CD = ${SITE_CD}
      ORDER BY STEP_ID, FILE_SEQ
    ]]>
  </statement>

    <statement name="datbaseListInfo">
    <![CDATA[
      SELECT
                JOB_ID,
                STEP_ID,
                INOUT_TYPE,
                DB_SPEC,
                XML_QUERY_LOC,
                XML_QUERY_NAME,
                MAIN_CHECK,
                XML_QUERY_ALIAS,
                SEQ,
                MOD_DT,
                MOD_USER_ID,
                REG_DT,
                REG_USER_ID,
                SITE_CD
      FROM DEVON.SERE_BT_DB_INFO_TB
      WHERE JOB_ID = ${JOB_ID}
        AND STEP_ID = ${STEP_ID}
        AND SITE_CD = ${SITE_CD}
      ORDER BY STEP_ID
    ]]>
  </statement>

  <!-- 작업 실행 File size, File 처리 시작 시간 update -->
  <statement name="execlog.updateJobExecFileStartInfo">
  <![CDATA[
    UPDATE DEVON.SERE_BT_FILE_EXEC_TX_TB
       SET
           FILE_SIZE=${FILE_SIZE},
           START_TIME=SYSTIMESTAMP,
           MOD_DT = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
           MOD_USER_ID = ${MOD_USER_ID}
     WHERE JOB_ID = ${JOB_ID}
       AND STEP_ID = ${STEP_ID}
       AND EXEC_COUNT = ${EXEC_COUNT}
       AND FILE_NAME = ${FILE_NAME}
       AND SITE_CD = ${SITE_CD}
  ]]>
  </statement>

  <!-- 작업 실행 File 처리 종료 시간 update -->
  <statement name="execlog.updateJobExecFileEndInfo">
  <![CDATA[
    UPDATE DEVON.SERE_BT_FILE_EXEC_TX_TB
       SET
           FILE_NAME = ${FILE_NAME},
           TOTAL_COUNT = ${TOTAL_COUNT},
           END_TIME = SYSTIMESTAMP,
           MOD_DT = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
           MOD_USER_ID = ${MOD_USER_ID}
     WHERE JOB_ID = ${JOB_ID}
       AND STEP_ID = ${STEP_ID}
       AND EXEC_COUNT = ${EXEC_COUNT}
       AND SITE_CD = ${SITE_CD}
  ]]>
  </statement>
  
  <!-- 작업 실행 File 처리 종료 시간 update dynamic file -->
  <statement name="execlog.updateJobExecFileEndInfoForDynamic">
  <![CDATA[
    UPDATE DEVON.SERE_BT_FILE_EXEC_TX_TB
       SET
           TOTAL_COUNT = ${TOTAL_COUNT},
           END_TIME = SYSTIMESTAMP,
           MOD_DT = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
           MOD_USER_ID = ${MOD_USER_ID}
     WHERE JOB_ID = ${JOB_ID}
       AND STEP_ID = ${STEP_ID}
       AND EXEC_COUNT = ${EXEC_COUNT}
       AND FILE_NAME = ${FILE_NAME}
       AND SITE_CD = ${SITE_CD}
  ]]>
  </statement>

  <statement name="statuslog.insertJobStatus"><![CDATA[
        INSERT
        INTO DEVON.SERE_BT_JOB_ERR_EXEC_TX_TB
         (
            SEQ,
            JOB_ID,
            EXEC_COUNT,
            ERR_CODE,
            ERR_MSG,
            ERR_CAUSE,
            MOD_DT,
            MOD_USER_ID,
            REG_DT,
            REG_USER_ID,
            SITE_CD
        ) VALUES (
             DEVON.SERE_BT_JOB_ERR_EXEC_TX_SEQ.NEXTVAL,
            ${JOB_ID},
            ${EXEC_COUNT},
            ${ERR_CODE},
            ${ERR_MSG},
            SUBSTRB(${ERR_CAUSE}, 1, 4000),
            TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
            ${MOD_USER_ID},
            TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
            ${REG_USER_ID},
            ${SITE_CD}
        )
        ]]>
    </statement>

  <statement name="statuslog.updateStepStatus"><![CDATA[
        UPDATE /* devonbatch.shc_core_query.oracle.statuslog.updateJobStatus */ DEVON.SERE_BT_STEP_EXEC_TX_TB
        SET
          ERR_MSG = SUBSTRB(${ERR_MSG}, 1, 1000),
          ERR_CODE = ${ERR_CODE},
          ERR_CAUSE = SUBSTRB(${ERR_CAUSE}, 1, 4000),
          MOD_DT = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
          MOD_USER_ID = ${MOD_USER_ID}
        WHERE EXECUTOR_ID = 'SHELL'
          AND JOB_ID = ${JOB_ID}
          AND EXEC_COUNT=${EXEC_COUNT}
          AND STEP_ID=${STEP_ID}
          AND SITE_CD = ${SITE_CD}
      ]]>
    </statement>

    <statement name="statuslog.insertJobReworkStatus"><![CDATA[
        INSERT
        INTO DEVON.SERE_BT_JOB_EXEC_REWORK_TB
         (
            JOB_ID,
            EXEC_COUNT,
            EXECUTOR_ID,
            REWORK_PLACE,
            MOD_DT,
            MOD_USER_ID,
            REG_DT,
            REG_USER_ID,
            SITE_CD,
            COMMIT_DATA_COUNT,
            STEP_ID,
            FILE_NAME,
            SQL_KEY_VALUE,
            JAS_NAME
        ) VALUES (
            ${JOB_ID},
            ${EXEC_COUNT},
            ${EXECUTOR_ID},
            ${REWORK_PLACE},
            TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
            ${MOD_USER_ID},
            TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
            ${REG_USER_ID},
            ${SITE_CD},
            ${COMMIT_DATA_COUNT},
            ${STEP_ID},
            ${FILE_NAME},
            ${SQL_KEY_VALUE},
            ${JAS_NAME}
        )
        ]]>
    </statement>

    <statement name="statuslog.retrieveJobReworkStatus"><![CDATA[
        SELECT
            JOB_ID,
            EXEC_COUNT,
            EXECUTOR_ID,
            REWORK_PLACE,
            MOD_DT,
            MOD_USER_ID,
            REG_DT,
            REG_USER_ID,
            SITE_CD,
            COMMIT_DATA_COUNT,
            SQL_KEY_VALUE
        FROM (
		        SELECT
		            JOB_ID,
		            EXEC_COUNT,
		            EXECUTOR_ID,
		            REWORK_PLACE,
		            MOD_DT,
		            MOD_USER_ID,
		            REG_DT,
		            REG_USER_ID,
		            SITE_CD,
		            COMMIT_DATA_COUNT,
		            SQL_KEY_VALUE
		        FROM
		            DEVON.SERE_BT_JOB_EXEC_REWORK_TB
		        WHERE
		            JOB_ID = ${JOB_ID}
		        AND EXEC_COUNT <= ${EXEC_COUNT}
		        AND EXECUTOR_ID = ${EXECUTOR_ID}
		        AND STEP_ID = ${STEP_ID}
		        AND SITE_CD = ${SITE_CD}
		        AND JAS_NAME = ${JAS_NAME}
		        ORDER BY EXEC_COUNT DESC )
        WHERE   ROWNUM = 1
        ]]>
    </statement>

	<statement name="statuslog.updateJobReworkStatus"><![CDATA[
	    MERGE INTO DEVON.SERE_BT_JOB_EXEC_REWORK_TB
	    USING DUAL
	    ON (JOB_ID      = ${JOB_ID}      AND
	        EXEC_COUNT  = ${EXEC_COUNT}  AND
	        EXECUTOR_ID = ${EXECUTOR_ID} AND
	        STEP_ID     = ${STEP_ID} )
	    WHEN MATCHED THEN
	        UPDATE 
	            SET REWORK_PLACE      = ${REWORK_PLACE},
	                MOD_DT            = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
	                COMMIT_DATA_COUNT = ${COMMIT_DATA_COUNT},
	                FILE_NAME         = ${FILE_NAME},
	                SQL_KEY_VALUE     = ${SQL_KEY_VALUE}
	    WHEN NOT MATCHED THEN
	        INSERT
	        (
	            JOB_ID,
	            EXEC_COUNT,
	            EXECUTOR_ID,
	            REWORK_PLACE,
	            MOD_DT,
	            MOD_USER_ID,
	            REG_DT,
	            REG_USER_ID,
	            SITE_CD,
	            COMMIT_DATA_COUNT,
	            STEP_ID,
	            FILE_NAME,
	            SQL_KEY_VALUE,
	            JAS_NAME
	        ) VALUES (
	            ${JOB_ID},
	            ${EXEC_COUNT},
	            ${EXECUTOR_ID},
	            ${REWORK_PLACE},
	            TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
	            ${MOD_USER_ID},
	            TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
	            ${REG_USER_ID},
	            ${SITE_CD},
	            ${COMMIT_DATA_COUNT},
	            ${STEP_ID},
	            ${FILE_NAME},
	            ${SQL_KEY_VALUE},
	            ${JAS_NAME}
	        )
	        ]]>
	</statement>
	
	
	<statement name="statuslog.deleteJobReworkStatus"><![CDATA[
	    DELETE DEVON.SERE_BT_JOB_EXEC_REWORK_TB
	    WHERE JOB_ID      = ${JOB_ID}
	    --AND   EXEC_COUNT  = 
	    AND   EXECUTOR_ID = ${EXECUTOR_ID}
	    -- AND   STEP_ID     = 
	    AND   JAS_NAME    = ${JAS_NAME}
	        ]]>
	</statement>

    <!-- 작업 실행 File 이력을 새로 추가함 -->
  <statement name="execlog.insertJobExecFileLog">
  <![CDATA[
    INSERT INTO DEVON.SERE_BT_FILE_EXEC_TX_TB (
        JOB_ID, STEP_ID, INOUT_TYPE, FILE_NAME,
        FILE_PATH, IO_SPEC_ID, FILE_TYPE,
        O_DATE, EXEC_COUNT, SEQ, PROC_SEQ, EXEC_SEQ, START_TIME,
        MOD_DT, MOD_USER_ID, REG_DT, REG_USER_ID, SITE_CD
    ) VALUES (
        ${JOB_ID}, ${STEP_ID}, ${INOUT_TYPE}, ${FILE_NAME},
        ${FILE_PATH}, ${IO_SPEC_ID}, ${FILE_TYPE},
        ${O_DATE}, ${EXEC_COUNT},
        (
            SELECT
                NVL(MAX(SEQ), -1) + 1
            FROM DEVON.SERE_BT_FILE_EXEC_TX_TB
            WHERE STEP_ID = ${STEP_ID}
            AND FILE_NAME = ${FILE_NAME}
            AND O_DATE = ${O_DATE}
        ),
        ${PROC_SEQ}, ${EXEC_SEQ}, SYSTIMESTAMP,
        TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
        ${MOD_USER_ID},
        TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
        ${REG_USER_ID},
        ${SITE_CD}
    )
  ]]>
  </statement>



  <!-- 스텝의 상태 파일 로그 위치 업데이트 -->
    <statement name="execlog.updateStepFileLogPath">
      <![CDATA[
      UPDATE DEVON.SERE_BT_STEP_EXEC_TX_TB
      SET
          FILELOG_PATH = ${FILELOG_PATH},
          MOD_DT = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
          MOD_USER_ID = ${MOD_USER_ID}
      WHERE EXECUTOR_ID = 'SHELL'
          AND JOB_ID = ${JOB_ID}
          AND EXEC_COUNT=${EXEC_COUNT}
          AND STEP_ID=${STEP_ID}
          AND SITE_CD = ${SITE_CD}
      ]]>
    </statement>

    <!-- 작업의 파일 로그 위치 업데이트 -->
    <statement name="execlog.updateJobFileLogPath">
      <![CDATA[
      UPDATE DEVON.SERE_BT_JOB_EXEC_TX_TB
      SET
          FILELOG_PATH = ${FILELOG_PATH},
          MOD_DT = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
          MOD_USER_ID = ${MOD_USER_ID}
      WHERE EXECUTOR_ID = 'SHELL'
          AND JOB_ID = ${JOB_ID}
          AND EXEC_COUNT=${EXEC_COUNT}
          AND SITE_CD = ${SITE_CD}
      ]]>
    </statement>

    <!-- 작업의 실행 횟수 최대값을 반환함 -->
    <statement name="execlog.retrieveExecCountForUpdate">
        SELECT EXEC_COUNT, O_DATE, PROC_SEQ, EXEC_SEQ
          FROM DEVON.SERE_BT_EXEC_COUNT_TX_TB
         WHERE JOB_ID = ${JOB_ID}
           AND SITE_CD = ${SITE_CD}
           AND EXECUTOR_ID = ${EXECUTOR_ID}
           FOR UPDATE WAIT 10
    </statement>

    <!-- 작업 실행 이력을 새로 추가함 -->
    <statement name="execlog.insertExecCount">
        INSERT INTO DEVON.SERE_BT_EXEC_COUNT_TX_TB (
                    JOB_ID,
                    EXEC_COUNT,
                    O_DATE,
                    PROC_SEQ,
                    EXEC_SEQ,
                    EXECUTOR_ID,
                    MOD_DT,
                    MOD_USER_ID,
                    REG_DT,
                    REG_USER_ID,
                    SITE_CD

        ) values (
                    ${JOB_ID},
                    ${EXEC_COUNT},
                    ${O_DATE},
                    ${PROC_SEQ},
                    ${EXEC_SEQ},
                    ${EXECUTOR_ID},
                    TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
                    ${MOD_USER_ID},
                    TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
                    ${REG_USER_ID},
                    ${SITE_CD}

        )
    </statement>

    <statement name="execlog.updateExecCount">
        UPDATE DEVON.SERE_BT_EXEC_COUNT_TX_TB
           SET
               EXEC_COUNT = ${EXEC_COUNT},
               O_DATE = ${O_DATE},
               PROC_SEQ = ${PROC_SEQ},
               EXEC_SEQ = ${EXEC_SEQ},
               MOD_DT = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
               MOD_USER_ID = ${MOD_USER_ID}
         WHERE JOB_ID = ${JOB_ID}
           AND SITE_CD = ${SITE_CD}
           AND EXEC_COUNT = ${CURRENT_EXEC_COUNT}
           AND EXECUTOR_ID = ${EXECUTOR_ID}
    </statement>
    
    <!-- 일자전환상태 UPDATE -->
    <statement name="execlog.updateJobExecLogForDateConv">
      <![CDATA[
      UPDATE DEVON.SERE_BT_JOB_EXEC_TX_TB
      SET
          DATE_CONV_YN = ${DATE_CONV_YN},
          MOD_DT = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
          MOD_USER_ID = ${MOD_USER_ID}
      WHERE EXECUTOR_ID = 'SHELL'
          AND JOB_ID = ${JOB_ID}
          AND EXEC_COUNT=${EXEC_COUNT}
          AND SITE_CD = ${SITE_CD}
      ]]>
    </statement>
    
    <!-- 일자전환상태 Error 설정 -->
    <statement name="execlog.updateJobExecLogForDateConvErr">
      <![CDATA[
       UPDATE DEVON.SERE_BT_JOB_EXEC_TX_TB
         SET
             STATUS_CODE = ${STATUS_CODE},
             CAUSE_STATUS_CODE = ${CAUSE_STATUS_CODE},
             END_TIME = SYSTIMESTAMP,
             MOD_DT = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MIssFF3'),
             MOD_USER_ID = ${MOD_USER_ID}
       WHERE EXECUTOR_ID = 'SHELL'
         AND JOB_ID = ${JOB_ID}
         AND EXEC_COUNT=${EXEC_COUNT}
         AND SITE_CD = ${SITE_CD}
      ]]>
    </statement>

    <!-- 메타 동기화 처리 추가함 -->
    <statement name="insertMetaSync">
        <![CDATA[
        INSERT INTO DEVON.META_MDA_WORD_INFO
        (
         OBJECT_NAME,
         ABBR_NAME,
         APP_VAR,
         OBJ_RMK1,
         OBJ_NO1,
         OBJ_NO2,
         TRM_TP,
         DOM_NM,
         CREATE_DT,
         MODIFY_DT
        )
        VALUES (
            ${OBJECT_NAME},
            ${ABBR_NAME},
            ${APP_VAR},
            ${OBJ_RMK1},
            ${OBJ_NO1},
            ${OBJ_NO2},
            ${TRM_TP},
            ${DOM_NM},
            TO_TIMESTAMP(${CREATE_DT},'YY/MM/DD/HH24/MI/SS'),
            TO_TIMESTAMP(${MODIFY_DT},'YY/MM/DD/HH24/MI/SS')
        )
        ]]>
    </statement>

    <statement name="deleteAllMetaSync">
        <![CDATA[
        DELETE FROM DEVON.META_MDA_WORD_INFO
        ]]>
    </statement>
    
    <statement name="truncateAllMetaSync">
        <![CDATA[
        TRUNCATE TABLE DEVON.META_MDA_WORD_INFO
        ]]>
    </statement>
    
    <statement name="renameTable">
		<![CDATA[
		call LOADER.PC_DBA_TABLE_EXCHANGE(${P_OWNER:inparam}, ${P_SRC_TABLE:inparam}, ${P_TGT_TABLE:inparam}, ${P_JOBID:inparam})
		]]>
	</statement>

    <statement name="exchangeTable">
		<![CDATA[
		call LOADER.PC_DBA_TABLE_EXCHANGE(${P_OWNER:inparam}, ${P_SRC_TABLE:inparam}, ${P_TGT_TABLE:inparam}, ${P_JOBID:inparam})
		]]>
	</statement>

	<statement name="truncateTable">
		<![CDATA[
		call LOADER.PC_DBA_TABLE_TRUNCATE(${P_JOBID:inparam}, ${P_OWNER:inparam}, ${P_TNAME:inparam})
		]]>
	</statement>
	
	<statement name="truncatePartitionTable">
		<![CDATA[
		call LOADER.PC_DBA_TABLE_TRUNCATE(${P_JOBID:inparam}, ${P_OWNER:inparam}, ${P_TNAME:inparam}, ${P_TYPE:inparam}, ${P_PNAME:inparam})
		]]>
	</statement>
	
	<statement name="exchTruncateTable">
		<![CDATA[
		call LOADER.PC_DBA_PARTITION_EXCHTRUNC(${IN_OWNER:inparam}, ${IN_SOURCE_TABLE_NAME:inparam}, ${IN_SOURCE_PARTITION_NAME:inparam}, ${IN_TARGET_TABLE_NAME:inparam}, ${IN_ID:inparam})
		]]>
	</statement>	
	
	<statement name="deletePartitionTable">
		<![CDATA[
		call LOADER.PC_DBA_PARTITION_DEL(${P_OWNER:inparam}, ${P_TNAME:inparam}, ${P_PNAME:inparam})
		]]>
	</statement>
	
	<statement name="resetSequence">
        <![CDATA[
        call LOADER.PC_DBA_SEQUENCE_RESET(${P_JOBID:inparam}, ${P_OWNER:inparam}, ${P_SEQ_NAME:inparam}, 1)
        ]]>
    </statement>
	
	<statement name="retrievePartitionNameByTableName"><![CDATA[
        SELECT PARTITION_NAME 
        FROM   ALL_TAB_PARTITIONS 
		WHERE TABLE_OWNER='INSTC'
		AND   TABLE_NAME = UPPER(${TABLE_NAME})
        ]]>
    </statement>
    
    <statement name="retrievePartitionNameByPartitionName"><![CDATA[
        SELECT PARTITION_NAME 
        FROM   ALL_TAB_PARTITIONS 
		WHERE TABLE_OWNER='INSTC'
		AND   TABLE_NAME = UPPER(${TABLE_NAME})
		AND   PARTITION_NAME LIKE '%' || UPPER(${PARTITION_NAME}) || '%'
        ]]>
    </statement>
	
	<statement name="ondemand.retrieveBatchAgentInfo"><![CDATA[
        SELECT  SERVER_ID,
        		IP_NM,
        		PORT_NO,
        		CONTEXT_NM,
        		URL_NM,
        		DEFAULT_YN
		FROM    DEVON.SERE_BT_SERVER_INFO_TB
		WHERE   SERVER_ID LIKE 'checkBatchExecute%'
        ]]>
    </statement>
	
	<statement name="ondemand.updateJobExecTb"><![CDATA[
        UPDATE DEVON.SERE_BT_JOB_EXEC_TX_TB
        SET STATUS_CODE       = ${STATUS_CODE},
			CAUSE_STATUS_CODE = ${CAUSE_STATUS_CODE},
            MOD_DT            = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3'),
            MOD_USER_ID       = ${MOD_USER_ID}
        WHERE JOB_ID          = ${JOB_ID}
          AND EXECUTOR_ID     = ${EXECUTOR_ID}
          AND EXEC_COUNT      = ${EXEC_COUNT}
          AND SITE_CD         = ${SITE_CD}
        ]]>
    </statement>
    
    <statement name="ondemand.updateStepExecTb"><![CDATA[
        UPDATE DEVON.SERE_BT_STEP_EXEC_TX_TB
        SET STATUS_CODE       = ${STATUS_CODE},
			CAUSE_STATUS_CODE = ${CAUSE_STATUS_CODE},
        	MOD_USER_ID       = ${MOD_USER_ID},
        	MOD_DT            = TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3')
       	WHERE JOB_ID          = ${JOB_ID}
          AND EXECUTOR_ID     = ${EXECUTOR_ID}
          AND EXEC_COUNT      = ${EXEC_COUNT}
          AND SITE_CD         = ${SITE_CD}
        ]]>
    </statement>
    
	<statement name="ondemand.batchExeHis"><![CDATA[
			SELECT   A.JOB_ID
			        ,A.PROC_SEQ
			        ,A.O_DATE
			        ,A.EXEC_COUNT
			        ,A.STEP_ID
			        ,B.STEP_DESC
			        ,A.ERROR_COUNT
			        ,A.TOTAL_COUNT
			        ,A.SUCCESS_COUNT
			        ,A.SKIP_COUNT
			        ,A.ERR_CODE
			        ,A.STATUS_CODE 
			        ,A.CAUSE_STATUS_CODE
			        ,A.REG_DT
			        ,A.REG_USER_ID
			        ,A.MOD_DT
			        ,A.MOD_USER_ID
			        ,A.FAILED_SECTIONS
			        , TO_CHAR(A.START_TIME, 'YYYY/MM/DD HH24:MI:SS.FF6') START_TIME
    		        , TO_CHAR(A.END_TIME, 'YYYY/MM/DD HH24:MI:SS.FF6') END_TIME
			        ,DECODE(A.END_TIME, null, '', TO_CHAR(A.END_TIME - A.START_TIME, 'HH24:MI:SS.FF3')) EXECUTION_TIME
					,A.USER_MSG
			FROM    DEVON.SERE_BT_STEP_EXEC_TX_TB A,
			        DEVON.SERE_BT_STEP_INFO_TB B
			WHERE   A.JOB_ID = B.JOB_ID
			AND     A.STEP_ID = B.STEP_ID
			AND     A.JOB_ID = ${JOB_ID}
			AND     A.O_DATE = ${O_DATE}
			AND     A.SITE_CD = ${SITE_CD}
			ORDER BY A.PROC_SEQ DESC, A.STEP_ID
        ]]>
    </statement>
    
    <statement name="ondemand.ondemandBatchInfo"><![CDATA[
		SELECT  JOB_ID,
	    	    EXEC_ENABLE_START_TIME,
	        	EXEC_ENABLE_END_TIME,
	        	EXEC_ENABLE_YN,
	        	EXEC_ENABLE_WEEK_DAYS,
	        	EXIT_RESPONSE_CHN
		FROM    DEVON.SERE_BT_ONDEMAND_INFO_TB
		WHERE   JOB_ID  = ${JOB_ID}
		AND     SITE_CD = ${SITE_CD}
        ]]>
    </statement>
    
    <statement name="vbfile.retrieveRecordLength"><![CDATA[
		SELECT X.IOIT_BT_FLD_TP_CD, SUM(LEN) RECORD_LEN
		FROM (
		        SELECT A.IOIT_BT_FLD_TP_CD,
		               CASE WHEN A.IOIT_DATA_TY = 'gf' THEN 
		                        NVL((SELECT SUM(B.IOIT_LENGTH_NO)
		                        FROM   DEVON.SGRS_IOSPECITEM B
		                        WHERE  B.SPEC_ID = ${IO_SPEC_ID}
		                        AND    B.SITE_CD = ${SITE_CD}
		                        AND    B.IOIT_PARENTPATH_ID = A.ITEM_ID) * A.IOIT_DEFAULTVAL_NM, 0)
		               
		                    WHEN A.IOIT_DATA_TY != 'gf' AND A.IOIT_PARENTPATH_ID IS NULL THEN
		                        A.IOIT_LENGTH_NO
		                    ELSE
		                        0
		               END LEN
		        FROM DEVON.SGRS_IOSPECITEM A
		        WHERE A.SPEC_ID = ${IO_SPEC_ID}
		        AND   A.SITE_CD = ${SITE_CD}
		        
		) X
		GROUP BY X.IOIT_BT_FLD_TP_CD
        ]]>
    </statement>
    
    <statement name="log.selectDeleteList"><![CDATA[
        SELECT  JOB_ID,
                EXEC_COUNT,
                EXECUTOR_ID,
                SITE_CD
        FROM  DEVON.SERE_BT_JOB_EXEC_TX_TB
        WHERE START_TIME  <= TO_TIMESTAMP(${END_DATE}, 'YYYYMMDD')
        AND   ROWNUM < 10
        ]]>
    </statement>
    
    <statement name="log.deleteStepExecTxTb"><![CDATA[
        DELETE FROM DEVON.SERE_BT_STEP_EXEC_TX_TB
        WHERE  EXECUTOR_ID = ${EXECUTOR_ID}
        AND    JOB_ID      = ${JOB_ID}
        AND    EXEC_COUNT  = ${EXEC_COUNT}
        AND    SITE_CD     = ${SITE_CD}
        ]]>
    </statement>
    
    <statement name="log.deleteJobExecStopTxTb"><![CDATA[
        DELETE FROM DEVON.SERE_BT_JOB_EXEC_STOP_TX_TB
        WHERE  EXECUTOR_ID = ${EXECUTOR_ID}
        AND    JOB_ID      = ${JOB_ID}
        AND    EXEC_COUNT  = ${EXEC_COUNT}
        ]]>
    </statement>
    
    <statement name="log.deleteJobExecReworkTb"><![CDATA[
        DELETE FROM DEVON.SERE_BT_JOB_EXEC_REWORK_TB
        WHERE  JOB_ID      = ${JOB_ID}
        AND    EXEC_COUNT  = ${EXEC_COUNT}
        AND    EXECUTOR_ID = ${EXECUTOR_ID}
        ]]>
    </statement>
    
    <statement name="log.deleteJobErrExecTxTb"><![CDATA[
        DELETE FROM DEVON.SERE_BT_JOB_ERR_EXEC_TX_TB
        WHERE   SEQ > 0
        AND     JOB_ID = ${JOB_ID}
        AND     (EXEC_COUNT = 0 OR EXEC_COUNT = ${EXEC_COUNT})
        ]]>
    </statement>
    
    <statement name="log.deleteExecUserTxTb"><![CDATA[
        DELETE FROM  DEVON.SERE_BT_EXEC_USER_TX_TB
        WHERE   START_TIME <= TO_TIMESTAMP(${END_DATE}, 'YYYYMMDD')
        AND     ROWNUM < 10000
        ]]>
    </statement>
    
    <statement name="log.deleteFileExecTxTb"><![CDATA[
        DELETE FROM  DEVON.SERE_BT_FILE_EXEC_TX_TB
        WHERE   START_TIME <= TO_TIMESTAMP(${END_DATE}, 'YYYYMMDD')
        AND     ROWNUM < 10000
        ]]>
    </statement>
    
    <statement name="log.deleteJobExecTxTb"><![CDATA[
        DELETE FROM  DEVON.SERE_BT_JOB_EXEC_TX_TB
        WHERE   START_TIME <= TO_TIMESTAMP(${END_DATE}, 'YYYYMMDD')
        AND     ROWNUM < 10000
        ]]>
    </statement>

    <statement name="log.deleteCCGrpTb"><![CDATA[
		DELETE FROM DEVON.SERE_CCGRP_TB
		WHERE CC_PRC_YMD BETWEEN NVL(${START_DATE}, '00010101') AND ${END_DATE}
		  AND ROWNUM < 10001     
        ]]>
    </statement>    
    
    <statement name="log.deleteDfrdDatProcTb"><![CDATA[
		DELETE FROM DEVON.SERE_DFRDDATPROC_TB
		 WHERE DAY_CD = SUBSTR(${TRAN_DT}, 7, 2)
		   AND INST_NO = ${INST_NO}
		   AND NODE_NO = ${NODE_NO}
		   AND ROWNUM < 10001   
        ]]>
    </statement>        
    
    <statement name="log.deleteTimerTb"><![CDATA[
		DELETE FROM DEVON.SERE_TIMER_TB
		 WHERE SUBSTR(GLOB_ID, 14, 8) BETWEEN NVL(${START_DATE}, '00010101') AND ${END_DATE}
		   AND ROWNUM < 10001   
        ]]>
    </statement> 

    <statement name="log.deleteMqErrLogInTb"><![CDATA[
		DELETE FROM DEVON.SERL_MQERRLOG_IN_TB
		 WHERE SUBSTR(GUID, 14, 8) BETWEEN NVL(${START_DATE}, '00010101') AND ${END_DATE}
		   AND ROWNUM < 10001  
        ]]>
    </statement> 
    
    <statement name="log.deleteMqErrLogOutTb"><![CDATA[
		DELETE FROM DEVON.SERL_MQERRLOG_OUT_TB
		 WHERE SUBSTR(GUID, 14, 8) BETWEEN NVL(${START_DATE}, '00010101') AND ${END_DATE}
		   AND ROWNUM < 10001    
        ]]>
    </statement> 
    
    <statement name="log.deleteTranLkLogTb"><![CDATA[
		DELETE FROM DEVON.SGMC_TRANLKLOG_TB
		 WHERE SUBSTR(GUID, 14, 8) BETWEEN NVL(${START_DATE}, '00010101') AND ${END_DATE}
		   AND ROWNUM < 10001   
        ]]>
    </statement>     
    
    <!-- ================================================================================================
    * 설    명 : 저널테이블 삭제
    * 관련소스 :
    * 변경이력 : 20210615 최웅기 Journal 테이블 일자별 관리
    ================================================================================================== -->    
    <statement name="log.deleteJournal">
    	<![CDATA[
		DELETE FROM {#1}DEVON.SERL_JOURNAL{/#1} 
		 WHERE DAY_CD = SUBSTR(${TARGET_DATE}, 7, 2)
		   AND INST_NO = ${INST_NO}
		   AND ROWNUM  < 10001   
        ]]>
        <replace condition="${DAY_CD}.EQ.01" id="#1"><![CDATA[DEVON.SERL_JOURNAL_01]]></replace>
        <replace condition="${DAY_CD}.EQ.02" id="#1"><![CDATA[DEVON.SERL_JOURNAL_02]]></replace>
        <replace condition="${DAY_CD}.EQ.03" id="#1"><![CDATA[DEVON.SERL_JOURNAL_03]]></replace>
        <replace condition="${DAY_CD}.EQ.04" id="#1"><![CDATA[DEVON.SERL_JOURNAL_04]]></replace>
        <replace condition="${DAY_CD}.EQ.05" id="#1"><![CDATA[DEVON.SERL_JOURNAL_05]]></replace>
        <replace condition="${DAY_CD}.EQ.06" id="#1"><![CDATA[DEVON.SERL_JOURNAL_06]]></replace>
        <replace condition="${DAY_CD}.EQ.07" id="#1"><![CDATA[DEVON.SERL_JOURNAL_07]]></replace>
        <replace condition="${DAY_CD}.EQ.08" id="#1"><![CDATA[DEVON.SERL_JOURNAL_08]]></replace>
        <replace condition="${DAY_CD}.EQ.09" id="#1"><![CDATA[DEVON.SERL_JOURNAL_09]]></replace>
        <replace condition="${DAY_CD}.EQ.10" id="#1"><![CDATA[DEVON.SERL_JOURNAL_10]]></replace>
        <replace condition="${DAY_CD}.EQ.11" id="#1"><![CDATA[DEVON.SERL_JOURNAL_11]]></replace>
        <replace condition="${DAY_CD}.EQ.12" id="#1"><![CDATA[DEVON.SERL_JOURNAL_12]]></replace>
        <replace condition="${DAY_CD}.EQ.13" id="#1"><![CDATA[DEVON.SERL_JOURNAL_13]]></replace>
        <replace condition="${DAY_CD}.EQ.14" id="#1"><![CDATA[DEVON.SERL_JOURNAL_14]]></replace>
        <replace condition="${DAY_CD}.EQ.15" id="#1"><![CDATA[DEVON.SERL_JOURNAL_15]]></replace>
        <replace condition="${DAY_CD}.EQ.16" id="#1"><![CDATA[DEVON.SERL_JOURNAL_16]]></replace>
        <replace condition="${DAY_CD}.EQ.17" id="#1"><![CDATA[DEVON.SERL_JOURNAL_17]]></replace>
        <replace condition="${DAY_CD}.EQ.18" id="#1"><![CDATA[DEVON.SERL_JOURNAL_18]]></replace>
        <replace condition="${DAY_CD}.EQ.19" id="#1"><![CDATA[DEVON.SERL_JOURNAL_19]]></replace>
        <replace condition="${DAY_CD}.EQ.20" id="#1"><![CDATA[DEVON.SERL_JOURNAL_20]]></replace>
        <replace condition="${DAY_CD}.EQ.21" id="#1"><![CDATA[DEVON.SERL_JOURNAL_21]]></replace>
        <replace condition="${DAY_CD}.EQ.22" id="#1"><![CDATA[DEVON.SERL_JOURNAL_22]]></replace>
        <replace condition="${DAY_CD}.EQ.23" id="#1"><![CDATA[DEVON.SERL_JOURNAL_23]]></replace>
        <replace condition="${DAY_CD}.EQ.24" id="#1"><![CDATA[DEVON.SERL_JOURNAL_24]]></replace>
        <replace condition="${DAY_CD}.EQ.25" id="#1"><![CDATA[DEVON.SERL_JOURNAL_25]]></replace>
        <replace condition="${DAY_CD}.EQ.26" id="#1"><![CDATA[DEVON.SERL_JOURNAL_26]]></replace>
        <replace condition="${DAY_CD}.EQ.27" id="#1"><![CDATA[DEVON.SERL_JOURNAL_27]]></replace>
        <replace condition="${DAY_CD}.EQ.28" id="#1"><![CDATA[DEVON.SERL_JOURNAL_28]]></replace>
        <replace condition="${DAY_CD}.EQ.29" id="#1"><![CDATA[DEVON.SERL_JOURNAL_29]]></replace>
        <replace condition="${DAY_CD}.EQ.30" id="#1"><![CDATA[DEVON.SERL_JOURNAL_30]]></replace>
        <replace condition="${DAY_CD}.EQ.31" id="#1"><![CDATA[DEVON.SERL_JOURNAL_31]]></replace>
    </statement>        
    
    
    <statement name="log.deleteExecUserTb"><![CDATA[
		DELETE
		  FROM DEVON.SERE_BT_EXEC_USER_TX_TB 
		 WHERE (JOB_ID, STEP_ID, SITE_CD, EXEC_COUNT, O_DATE) 
		    IN (
		        SELECT JOB_ID, STEP_ID, SITE_CD, EXEC_COUNT, O_DATE
		          FROM DEVON.SERE_BT_STEP_EXEC_TX_TB  
		         WHERE (EXECUTOR_ID, JOB_ID, EXEC_COUNT, SITE_CD) 
		            IN (
		                SELECT A.EXECUTOR_ID
		                     , A.JOB_ID
		                     , A.EXEC_COUNT
		                     , A.SITE_CD
		                  FROM DEVON.SERE_BT_JOB_EXEC_TX_TB A --배치실행이력
		                 WHERE A.O_DATE BETWEEN NVL(${START_DATE}, '00010101') AND ${END_DATE}   
		                   AND ROWNUM < ${COMMIT_UNIT_PRA}  
		               ) 
		       ) 
		   AND ROWNUM < ${COMMIT_UNIT_SLV}  
        ]]>
    </statement>

    <statement name="log.deleteExecReworkTb"><![CDATA[
		DELETE
		  FROM DEVON.SERE_BT_JOB_EXEC_REWORK_TB 
		 WHERE (EXECUTOR_ID, JOB_ID, EXEC_COUNT) 
		    IN (
		        SELECT A.EXECUTOR_ID
		             , A.JOB_ID
		             , A.EXEC_COUNT
		          FROM DEVON.SERE_BT_JOB_EXEC_TX_TB A 
		         WHERE A.O_DATE BETWEEN NVL(${START_DATE}, '00010101') AND ${END_DATE}   
		           AND ROWNUM < ${COMMIT_UNIT_PRA}  
		       ) 
		   AND ROWNUM < ${COMMIT_UNIT_SLV} 
        ]]>
    </statement>

    <statement name="log.deleteErrExecTb"><![CDATA[
		DELETE
		  FROM DEVON.SERE_BT_JOB_ERR_EXEC_TX_TB 
		 WHERE (JOB_ID, SITE_CD) 
		    IN (
		        SELECT A.JOB_ID
		             , A.SITE_CD
		          FROM DEVON.SERE_BT_JOB_EXEC_TX_TB A 
		         WHERE A.O_DATE BETWEEN NVL(${START_DATE}, '00010101') AND ${END_DATE}   
		           AND ROWNUM < ${COMMIT_UNIT_PRA}  
		       ) 
		   AND ROWNUM < ${COMMIT_UNIT_SLV} 
        ]]>
    </statement>
    
    <statement name="log.deleteExecStopTb"><![CDATA[
		DELETE
		  FROM DEVON.SERE_BT_JOB_EXEC_STOP_TX_TB 
		 WHERE (EXECUTOR_ID, JOB_ID, EXEC_COUNT, SITE_CD) 
		    IN (
		        SELECT A.EXECUTOR_ID
		             , A.JOB_ID
		             , A.EXEC_COUNT
		             , A.SITE_CD
		          FROM DEVON.SERE_BT_JOB_EXEC_TX_TB A 
		         WHERE A.O_DATE BETWEEN NVL(${START_DATE}, '00010101') AND ${END_DATE}   
		           AND ROWNUM < ${COMMIT_UNIT_PRA}  
		       ) 
		   AND ROWNUM < ${COMMIT_UNIT_SLV} 
        ]]>
    </statement>
    
    <statement name="log.deleteJobExecTb"><![CDATA[
		DELETE
		  FROM DEVON.SERE_BT_JOB_EXEC_TX_TB A 
		 WHERE A.O_DATE BETWEEN NVL(${START_DATE}, '00010101') AND ${END_DATE}   
		   AND ROWNUM < ${COMMIT_UNIT_PRA}  
        ]]>
    </statement>
    
    <statement name="log.deleteStepExecTb"><![CDATA[
		DELETE
		  FROM DEVON.SERE_BT_STEP_EXEC_TX_TB 
		 WHERE (EXECUTOR_ID, JOB_ID, EXEC_COUNT, SITE_CD) 
		    IN (
		        SELECT A.EXECUTOR_ID
		             , A.JOB_ID
		             , A.EXEC_COUNT
		             , A.SITE_CD
		          FROM DEVON.SERE_BT_JOB_EXEC_TX_TB A 
		         WHERE A.O_DATE BETWEEN NVL(${START_DATE}, '00010101') AND ${END_DATE}  
		           AND ROWNUM < ${COMMIT_UNIT_PRA}  
		       ) 
		   AND ROWNUM < ${COMMIT_UNIT_SLV} 
        ]]>
    </statement>
</statements>
